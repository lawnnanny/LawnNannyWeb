434a652d73fac9bf28978040de8016f7
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _enzyme = require('enzyme');

var _chance = require('chance');

var _chance2 = _interopRequireDefault(_chance);

var _HomePage = require('../../../src/components/pages/HomePage');

var _HomePage2 = _interopRequireDefault(_HomePage);

var _Common = require('../../../src/helpers/Common');

var Common = _interopRequireWildcard(_Common);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Home Page', function () {
  var wrapper = void 0;
  var chance = void 0;

  var renderComponent = function renderComponent() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return (0, _enzyme.shallow)(_react2.default.createElement(_HomePage2.default, {
      setEmail: props.setEmail || jest.fn(),
      setPassword: props.setPassword || jest.fn(),
      setFirstName: props.setFirstName || jest.fn(),
      setLastName: props.setLastName || jest.fn(),
      setPasswordRepeat: props.setPasswordRepeat || jest.fn(),
      setAddress: props.setAddress || jest.fn(),
      setCity: props.setCity || jest.fn(),
      setAddressState: props.setAddressState || jest.fn(),
      setZipcode: props.setZipcode || jest.fn(),
      openLoginModal: props.openLoginModal || jest.fn(),
      closeModal: props.closeModal || jest.fn(),
      isLoginModalOpen: props.isLoginModalOpen === undefined ? chance.bool() : props.isLoginModalOpen,
      openSignupModal: props.openSignupModal || jest.fn(),
      isSignupModalOpen: props.isSignupModalOpen === undefined ? chance.bool() : props.isSignupModalOpen
    }));
  };

  beforeEach(function () {
    chance = (0, _chance2.default)();
    wrapper = renderComponent();
  });

  it('is wrapped in a div', function () {
    expect(wrapper.type()).toEqual('div');
  });

  describe('Navbar wrapper', function () {
    var navbarWrapper = void 0;

    beforeEach(function () {
      navbarWrapper = wrapper.childAt(0);
    });

    it('is a div', function () {
      expect(navbarWrapper.type()).toEqual('div');
    });

    describe('Navbar', function () {
      var navbar = void 0;

      beforeEach(function () {
        navbar = navbarWrapper.childAt(0);
      });

      it('is a menu', function () {
        expect(navbar.type()).toEqual(_semanticUiReact.Menu);
      });

      it('is styled as a secondary menu', function () {
        expect(navbar.props().secondary).toBeTruthy();
      });

      describe('Login/Signup button container', function () {
        var loginSignupButtonContainer = void 0;

        beforeEach(function () {
          loginSignupButtonContainer = navbar.childAt(0);
        });

        it('is a menu subcomponent', function () {
          expect(loginSignupButtonContainer.type()).toEqual(_semanticUiReact.Menu.Menu);
        });

        it('is positioned correctly', function () {
          expect(loginSignupButtonContainer.props().position).toEqual('right');
        });

        describe('Login Modal', function () {
          var loginModal = void 0;

          beforeEach(function () {
            loginModal = loginSignupButtonContainer.childAt(0);
          });

          it('is a modal', function () {
            expect(loginModal.type()).toEqual(_semanticUiReact.Modal);
          });

          it('is a mini modal', function () {
            expect(loginModal.props().size).toEqual('mini');
          });

          it('closes the model when closed', function () {
            var mockCloseModal = jest.fn();

            wrapper = renderComponent({ closeModal: mockCloseModal });
            navbarWrapper = wrapper.childAt(0);
            navbar = navbarWrapper.childAt(0);
            loginSignupButtonContainer = navbar.childAt(0);
            loginModal = loginSignupButtonContainer.childAt(0);

            var loginModalOnCloseHandler = loginModal.props().onClose;

            loginModalOnCloseHandler();

            expect(mockCloseModal).toHaveBeenCalledTimes(1);
          });

          it('displays a close modal button', function () {
            expect(loginModal.props().closeIcon).toBeTruthy();
          });

          it('is open depending on what the open prop is', function () {
            var fakeIsLoginModalOpen = chance.bool();

            wrapper = renderComponent({ isLoginModalOpen: fakeIsLoginModalOpen });
            navbarWrapper = wrapper.childAt(0);
            navbar = navbarWrapper.childAt(0);
            loginSignupButtonContainer = navbar.childAt(0);
            loginModal = loginSignupButtonContainer.childAt(0);

            expect(loginModal.props().open).toEqual(fakeIsLoginModalOpen);
          });

          describe('Login Modal trigger', function () {
            var loginModalTrigger = void 0;

            beforeEach(function () {
              loginModalTrigger = (0, _enzyme.shallow)(loginModal.props().trigger);
            });

            it('is a menu item', function () {
              var expectedType = (0, _enzyme.shallow)(_react2.default.createElement(_semanticUiReact.Menu.Item, { onClick: jest.fn() })).type();

              expect(loginModalTrigger.type()).toEqual(expectedType);
            });

            it('opens the modal when clicked', function () {
              var mockOpenLoginModal = jest.fn();

              wrapper = renderComponent({ openLoginModal: mockOpenLoginModal });
              navbarWrapper = wrapper.childAt(0);
              navbar = navbarWrapper.childAt(0);
              loginSignupButtonContainer = navbar.childAt(0);
              loginModal = loginSignupButtonContainer.childAt(0);
              loginModalTrigger = (0, _enzyme.shallow)(loginModal.props().trigger);

              var loginModalTriggerOnClickHandler = loginModalTrigger.props().onClick;

              loginModalTriggerOnClickHandler();

              expect(mockOpenLoginModal).toHaveBeenCalledTimes(1);
            });

            it('displays the correct word', function () {
              var loginModalTriggerText = loginModalTrigger.childAt(0);

              expect(loginModalTriggerText.text()).toEqual('Login');
            });
          });

          describe('Login Modal Header', function () {
            var loginModalHeader = void 0;

            beforeEach(function () {
              loginModalHeader = loginModal.childAt(0);
            });

            it('is a modal header', function () {
              expect(loginModalHeader.type()).toEqual(_semanticUiReact.Modal.Header);
            });

            it('displays the correct text', function () {
              var loginModalHeaderText = loginModalHeader.childAt(0);

              expect(loginModalHeaderText.text()).toEqual('Welcome Back!');
            });
          });

          describe('Login Modal Description', function () {
            var loginModalDescription = void 0;

            beforeEach(function () {
              loginModalDescription = loginModal.childAt(1);
            });

            it('is a modal description', function () {
              expect(loginModalDescription.type()).toEqual(_semanticUiReact.Modal.Description);
            });

            describe('Login Modal Description Grid', function () {
              var loginModalDescriptionGrid = void 0;

              beforeEach(function () {
                loginModalDescriptionGrid = loginModalDescription.childAt(0);
              });

              it('is a grid', function () {
                expect(loginModalDescriptionGrid.type()).toEqual(_semanticUiReact.Grid);
              });

              it('contains three rows', function () {
                expect.assertions(3);

                var loginModalDescriptionGridRows = loginModalDescriptionGrid.children();

                loginModalDescriptionGridRows.forEach(function (row) {
                  expect(row.type()).toEqual(_semanticUiReact.Grid.Row);
                });
              });

              it('contains a column inside of each row', function () {
                expect.assertions(3);

                var loginModalDescriptionGridRows = loginModalDescriptionGrid.children();

                loginModalDescriptionGridRows.forEach(function (row) {
                  var column = row.childAt(0);

                  expect(column.type()).toEqual(_semanticUiReact.Grid.Column);
                });
              });

              it('contains a row for the login button that is centered', function () {
                var loginButtonRow = loginModalDescriptionGrid.childAt(2);

                expect(loginButtonRow.props().centered).toBeTruthy();
              });

              it('contains a row for the login button that has a column with a width of 6', function () {
                var loginButtonRow = loginModalDescriptionGrid.childAt(2);
                var loginButtonColumn = loginButtonRow.childAt(0);

                expect(loginButtonColumn.props().width).toEqual(6);
              });

              describe('Email Input', function () {
                var emailInput = void 0;

                beforeEach(function () {
                  var emailInputRow = loginModalDescriptionGrid.childAt(0);
                  var emailInputColumn = emailInputRow.childAt(0);

                  emailInput = emailInputColumn.childAt(0);
                });

                it('is an input', function () {
                  expect(emailInput.type()).toEqual(_semanticUiReact.Input);
                });

                it('has a fluid width', function () {
                  expect(emailInput.props().fluid).toBeTruthy();
                });

                it('has a user icon', function () {
                  expect(emailInput.props().icon).toEqual('user');
                });

                it('positions the icon on the left side', function () {
                  expect(emailInput.props().iconPosition).toEqual('left');
                });

                it('displays the correct placeholder text', function () {
                  expect(emailInput.props().placeholder).toEqual('someone@example.com');
                });

                it('sets the email when the value changes', function () {
                  var mockSetEmail = jest.fn();

                  wrapper = renderComponent({ setEmail: mockSetEmail });
                  navbarWrapper = wrapper.childAt(0);
                  navbar = navbarWrapper.childAt(0);
                  loginSignupButtonContainer = navbar.childAt(0);
                  loginModal = loginSignupButtonContainer.childAt(0);
                  loginModalDescription = loginModal.childAt(1);
                  loginModalDescriptionGrid = loginModalDescription.childAt(0);

                  var emailInputRow = loginModalDescriptionGrid.childAt(0);
                  var emailInputColumn = emailInputRow.childAt(0);

                  emailInput = emailInputColumn.childAt(0);

                  var emailInputOnChangeHandler = emailInput.props().onChange;

                  emailInputOnChangeHandler();

                  expect(mockSetEmail).toHaveBeenCalledTimes(1);
                });
              });

              describe('Password Input', function () {
                var passwordInput = void 0;

                beforeEach(function () {
                  var passwordInputRow = loginModalDescriptionGrid.childAt(1);
                  var passwordInputColumn = passwordInputRow.childAt(0);

                  passwordInput = passwordInputColumn.childAt(0);
                });

                it('is an input', function () {
                  expect(passwordInput.type()).toEqual(_semanticUiReact.Input);
                });

                it('has a fluid width', function () {
                  expect(passwordInput.props().fluid).toBeTruthy();
                });

                it('has a user icon', function () {
                  expect(passwordInput.props().icon).toEqual('lock');
                });

                it('is a type input', function () {
                  expect(passwordInput.props().type).toEqual('password');
                });

                it('positions the icon on the left side', function () {
                  expect(passwordInput.props().iconPosition).toEqual('left');
                });

                it('displays the correct placeholder text', function () {
                  expect(passwordInput.props().placeholder).toEqual('Password');
                });

                it('sets the password when the value changes', function () {
                  var mockSetPassword = jest.fn();

                  wrapper = renderComponent({ setPassword: mockSetPassword });
                  navbarWrapper = wrapper.childAt(0);
                  navbar = navbarWrapper.childAt(0);
                  loginSignupButtonContainer = navbar.childAt(0);
                  loginModal = loginSignupButtonContainer.childAt(0);
                  loginModalDescription = loginModal.childAt(1);
                  loginModalDescriptionGrid = loginModalDescription.childAt(0);

                  var passwordInputRow = loginModalDescriptionGrid.childAt(1);
                  var passwordInputColumn = passwordInputRow.childAt(0);

                  passwordInput = passwordInputColumn.childAt(0);

                  var passwordInputOnChangeHandler = passwordInput.props().onChange;

                  passwordInputOnChangeHandler();

                  expect(mockSetPassword).toHaveBeenCalledTimes(1);
                });
              });

              describe('Login Button', function () {
                var loginButton = void 0;

                beforeEach(function () {
                  var loginButtonRow = loginModalDescriptionGrid.childAt(2);
                  var loginButtonColumn = loginButtonRow.childAt(0);

                  loginButton = loginButtonColumn.childAt(0);
                });

                it('is a button', function () {
                  expect(loginButton.type()).toEqual(_semanticUiReact.Button);
                });
                it('is a large size', function () {
                  expect(loginButton.props().size).toEqual('large');
                });

                it('closes the login modal when clicked', function () {
                  var mockCloseModal = jest.fn();

                  wrapper = renderComponent({ closeModal: mockCloseModal });
                  navbarWrapper = wrapper.childAt(0);
                  navbar = navbarWrapper.childAt(0);
                  loginSignupButtonContainer = navbar.childAt(0);
                  loginModal = loginSignupButtonContainer.childAt(0);
                  loginModalDescription = loginModal.childAt(1);
                  loginModalDescriptionGrid = loginModalDescription.childAt(0);

                  var loginButtonRow = loginModalDescriptionGrid.childAt(2);
                  var loginButtonColumn = loginButtonRow.childAt(0);

                  loginButton = loginButtonColumn.childAt(0);

                  var loginButtonOnClickHandler = loginButton.props().onClick;

                  loginButtonOnClickHandler();

                  expect(mockCloseModal).toHaveBeenCalledTimes(1);
                });
              });
            });
          });
        });

        describe('Signup Modal', function () {
          var signupModal = void 0;

          beforeEach(function () {
            signupModal = loginSignupButtonContainer.childAt(1);
          });

          it('is a modal', function () {
            expect(signupModal.type()).toEqual(_semanticUiReact.Modal);
          });

          it('is a tiny modal', function () {
            expect(signupModal.props().size).toEqual('tiny');
          });

          it('is open depending on the value of the open prop', function () {
            var fakeIsSignupModalOpen = chance.bool();

            wrapper = renderComponent({ isSignupModalOpen: fakeIsSignupModalOpen });
            navbarWrapper = wrapper.childAt(0);
            navbar = navbarWrapper.childAt(0);
            loginSignupButtonContainer = navbar.childAt(0);
            signupModal = loginSignupButtonContainer.childAt(1);

            expect(signupModal.props().open).toEqual(fakeIsSignupModalOpen);
          });

          it('closes the modal when closed', function () {
            var mockCloseModal = jest.fn();

            wrapper = renderComponent({ closeModal: mockCloseModal });
            navbarWrapper = wrapper.childAt(0);
            navbar = navbarWrapper.childAt(0);
            loginSignupButtonContainer = navbar.childAt(0);
            signupModal = loginSignupButtonContainer.childAt(1);

            var signupModalOnCloseHandler = signupModal.props().onClose;

            signupModalOnCloseHandler();

            expect(mockCloseModal).toHaveBeenCalledTimes(1);
          });

          it('displays a close icon', function () {
            expect(signupModal.props().closeIcon).toBeTruthy();
          });

          describe('Signup Modal trigger', function () {
            var signupModalTrigger = void 0;

            beforeEach(function () {
              signupModalTrigger = (0, _enzyme.shallow)(signupModal.props().trigger);
            });

            it('is a menu item', function () {
              var expectedType = (0, _enzyme.shallow)(_react2.default.createElement(_semanticUiReact.Menu.Item, { onClick: jest.fn() })).type();

              expect(signupModalTrigger.type()).toEqual(expectedType);
            });

            it('opens the modal when clicked', function () {
              var mockOpenSignupModal = jest.fn();

              wrapper = renderComponent({ openSignupModal: mockOpenSignupModal });
              navbarWrapper = wrapper.childAt(0);
              navbar = navbarWrapper.childAt(0);
              loginSignupButtonContainer = navbar.childAt(0);
              signupModal = loginSignupButtonContainer.childAt(1);
              signupModalTrigger = (0, _enzyme.shallow)(signupModal.props().trigger);

              var signupModalTriggerOnClickHandler = signupModalTrigger.props().onClick;

              signupModalTriggerOnClickHandler();

              expect(mockOpenSignupModal).toHaveBeenCalledTimes(1);
            });

            it('displays the correct word', function () {
              var signupModalTriggerText = signupModalTrigger.childAt(0);

              expect(signupModalTriggerText.text()).toEqual('Sign Up');
            });
          });

          describe('Signup Modal Header', function () {
            var signupModalHeader = void 0;

            beforeEach(function () {
              signupModalHeader = signupModal.childAt(0);
            });

            it('is a modal header', function () {
              expect(signupModalHeader.type()).toEqual(_semanticUiReact.Modal.Header);
            });

            it('displays the correct message', function () {
              var signupModalHeaderText = signupModalHeader.childAt(0);

              expect(signupModalHeaderText.text()).toEqual('Sign Up!');
            });
          });

          describe('Signup Modal Description', function () {
            var signupModalDescription = void 0;

            beforeEach(function () {
              signupModalDescription = signupModal.childAt(1);
            });

            it('is a modal description', function () {
              expect(signupModalDescription.type()).toEqual(_semanticUiReact.Modal.Description);
            });

            describe('Signup Modal Form', function () {
              var signupModalForm = void 0;

              beforeEach(function () {
                signupModalForm = signupModalDescription.childAt(0);
              });

              it('is a form', function () {
                expect(signupModalForm.type()).toEqual(_semanticUiReact.Form);
              });

              describe('Form Group - Name', function () {
                var nameFormGroup = void 0;

                beforeEach(function () {
                  nameFormGroup = signupModalForm.childAt(0);
                });

                it('is a form group', function () {
                  expect(nameFormGroup.type()).toEqual(_semanticUiReact.Form.Group);
                });

                it('has fields of equal widths', function () {
                  expect(nameFormGroup.props().widths).toEqual('equal');
                });

                describe('First Name Input', function () {
                  var firstNameInput = void 0;

                  beforeEach(function () {
                    firstNameInput = nameFormGroup.childAt(0);
                  });

                  it('is a form input', function () {
                    expect(firstNameInput.type()).toEqual(_semanticUiReact.Form.Input);
                  });

                  it('has a fluid width', function () {
                    expect(firstNameInput.props().fluid).toBeTruthy();
                  });

                  it('is labeled correctly', function () {
                    expect(firstNameInput.props().label).toEqual('First Name');
                  });

                  it('has the correct placeholder text', function () {
                    expect(firstNameInput.props().placeholder).toEqual('First Name');
                  });

                  it('updates the first name when the input is changed', function () {
                    var mockSetFirstName = jest.fn();

                    wrapper = renderComponent({ setFirstName: mockSetFirstName });
                    navbarWrapper = wrapper.childAt(0);
                    navbar = navbarWrapper.childAt(0);
                    loginSignupButtonContainer = navbar.childAt(0);
                    signupModal = loginSignupButtonContainer.childAt(1);
                    signupModalDescription = signupModal.childAt(1);
                    signupModalForm = signupModalDescription.childAt(0);
                    nameFormGroup = signupModalForm.childAt(0);
                    firstNameInput = nameFormGroup.childAt(0);

                    var firstNameInputOnChangeHandler = firstNameInput.props().onChange;

                    firstNameInputOnChangeHandler();

                    expect(mockSetFirstName).toHaveBeenCalledTimes(1);
                  });
                });

                describe('Last Name Input', function () {
                  var lastNameInput = void 0;

                  beforeEach(function () {
                    lastNameInput = nameFormGroup.childAt(1);
                  });

                  it('is a form input', function () {
                    expect(lastNameInput.type()).toEqual(_semanticUiReact.Form.Input);
                  });

                  it('has a fluid width', function () {
                    expect(lastNameInput.props().fluid).toBeTruthy();
                  });

                  it('is labeled correctly', function () {
                    expect(lastNameInput.props().label).toEqual('Last Name');
                  });

                  it('has the correct placeholder text', function () {
                    expect(lastNameInput.props().placeholder).toEqual('Last Name');
                  });

                  it('updates the last name when the input is changed', function () {
                    var mockSetLastName = jest.fn();

                    wrapper = renderComponent({ setLastName: mockSetLastName });
                    navbarWrapper = wrapper.childAt(0);
                    navbar = navbarWrapper.childAt(0);
                    loginSignupButtonContainer = navbar.childAt(0);
                    signupModal = loginSignupButtonContainer.childAt(1);
                    signupModalDescription = signupModal.childAt(1);
                    signupModalForm = signupModalDescription.childAt(0);
                    nameFormGroup = signupModalForm.childAt(0);
                    lastNameInput = nameFormGroup.childAt(1);

                    var lastNameInputOnChangeHandler = lastNameInput.props().onChange;

                    lastNameInputOnChangeHandler();

                    expect(mockSetLastName).toHaveBeenCalledTimes(1);
                  });
                });
              });

              describe('Form Group - Email', function () {
                var emailFormGroup = void 0;

                beforeEach(function () {
                  emailFormGroup = signupModalForm.childAt(1);
                });

                it('is a form group', function () {
                  expect(emailFormGroup.type()).toEqual(_semanticUiReact.Form.Group);
                });

                it('has fields of equal widths', function () {
                  expect(emailFormGroup.props().widths).toEqual('equal');
                });

                describe('Email Input', function () {
                  var emailInput = void 0;

                  beforeEach(function () {
                    emailInput = emailFormGroup.childAt(0);
                  });

                  it('is a form input', function () {
                    expect(emailInput.type()).toEqual(_semanticUiReact.Form.Input);
                  });

                  it('has a fluid width', function () {
                    expect(emailInput.props().fluid).toBeTruthy();
                  });

                  it('is labeled correctly', function () {
                    expect(emailInput.props().label).toEqual('Email');
                  });

                  it('has the correct placeholder text', function () {
                    expect(emailInput.props().placeholder).toEqual('someone@example.com');
                  });

                  it('updates the email when the input is changed', function () {
                    var mockSetEmail = jest.fn();

                    wrapper = renderComponent({ setEmail: mockSetEmail });
                    navbarWrapper = wrapper.childAt(0);
                    navbar = navbarWrapper.childAt(0);
                    loginSignupButtonContainer = navbar.childAt(0);
                    signupModal = loginSignupButtonContainer.childAt(1);
                    signupModalDescription = signupModal.childAt(1);
                    signupModalForm = signupModalDescription.childAt(0);
                    emailFormGroup = signupModalForm.childAt(1);
                    emailInput = emailFormGroup.childAt(0);

                    var emailInputOnChangeHandler = emailInput.props().onChange;

                    emailInputOnChangeHandler();

                    expect(mockSetEmail).toHaveBeenCalledTimes(1);
                  });
                });
              });
              describe('Form Group - Password', function () {
                var passwordFormGroup = void 0;

                beforeEach(function () {
                  passwordFormGroup = signupModalForm.childAt(2);
                });

                it('is a form group', function () {
                  expect(passwordFormGroup.type()).toEqual(_semanticUiReact.Form.Group);
                });

                it('has fields of equal widths', function () {
                  expect(passwordFormGroup.props().widths).toEqual('equal');
                });

                describe('Password Input', function () {
                  var passwordInput = void 0;

                  beforeEach(function () {
                    passwordInput = passwordFormGroup.childAt(0);
                  });

                  it('is a form input', function () {
                    expect(passwordInput.type()).toEqual(_semanticUiReact.Form.Input);
                  });

                  it('has a fluid width', function () {
                    expect(passwordInput.props().fluid).toBeTruthy();
                  });

                  it('is labeled correctly', function () {
                    expect(passwordInput.props().label).toEqual('Password');
                  });

                  it('has type set to password', function () {
                    expect(passwordInput.props().type).toEqual('password');
                  });

                  it('has the correct placeholder text', function () {
                    expect(passwordInput.props().placeholder).toEqual('Password');
                  });

                  it('updates the password when the input is changed', function () {
                    var mockSetPassword = jest.fn();

                    wrapper = renderComponent({ setPassword: mockSetPassword });
                    navbarWrapper = wrapper.childAt(0);
                    navbar = navbarWrapper.childAt(0);
                    loginSignupButtonContainer = navbar.childAt(0);
                    signupModal = loginSignupButtonContainer.childAt(1);
                    signupModalDescription = signupModal.childAt(1);
                    signupModalForm = signupModalDescription.childAt(0);
                    passwordFormGroup = signupModalForm.childAt(2);
                    passwordInput = passwordFormGroup.childAt(0);

                    var passwordInputOnChangeHandler = passwordInput.props().onChange;

                    passwordInputOnChangeHandler();

                    expect(mockSetPassword).toHaveBeenCalledTimes(1);
                  });
                });

                describe('Password Repeat Input', function () {
                  var passwordRepeatInput = void 0;

                  beforeEach(function () {
                    passwordRepeatInput = passwordFormGroup.childAt(1);
                  });

                  it('is a form input', function () {
                    expect(passwordRepeatInput.type()).toEqual(_semanticUiReact.Form.Input);
                  });

                  it('has a fluid width', function () {
                    expect(passwordRepeatInput.props().fluid).toBeTruthy();
                  });

                  it('is labeled correctly', function () {
                    expect(passwordRepeatInput.props().label).toEqual('Repeat Password');
                  });

                  it('has type set to password', function () {
                    expect(passwordRepeatInput.props().type).toEqual('password');
                  });

                  it('has the correct placeholder text', function () {
                    expect(passwordRepeatInput.props().placeholder).toEqual('Repeat Password');
                  });

                  it('updates the repeated password when the input is changed', function () {
                    var mockSetPasswordRepeat = jest.fn();

                    wrapper = renderComponent({ setPasswordRepeat: mockSetPasswordRepeat });
                    navbarWrapper = wrapper.childAt(0);
                    navbar = navbarWrapper.childAt(0);
                    loginSignupButtonContainer = navbar.childAt(0);
                    signupModal = loginSignupButtonContainer.childAt(1);
                    signupModalDescription = signupModal.childAt(1);
                    signupModalForm = signupModalDescription.childAt(0);
                    passwordFormGroup = signupModalForm.childAt(2);
                    passwordRepeatInput = passwordFormGroup.childAt(1);

                    var passwordRepeatInputOnChangeHandler = passwordRepeatInput.props().onChange;

                    passwordRepeatInputOnChangeHandler();

                    expect(mockSetPasswordRepeat).toHaveBeenCalledTimes(1);
                  });
                });
              });

              describe('Form Group - Address & City', function () {
                var firstAddressFormGroup = void 0;

                beforeEach(function () {
                  firstAddressFormGroup = signupModalForm.childAt(3);
                });

                it('is a form group', function () {
                  expect(firstAddressFormGroup.type()).toEqual(_semanticUiReact.Form.Group);
                });

                it('has fields of equal widths', function () {
                  expect(firstAddressFormGroup.props().widths).toEqual('equal');
                });

                describe('Address Input', function () {
                  var addressInput = void 0;

                  beforeEach(function () {
                    addressInput = firstAddressFormGroup.childAt(0);
                  });

                  it('is a form input', function () {
                    expect(addressInput.type()).toEqual(_semanticUiReact.Form.Input);
                  });

                  it('has a fluid width', function () {
                    expect(addressInput.props().fluid).toBeTruthy();
                  });

                  it('is labeled correctly', function () {
                    expect(addressInput.props().label).toEqual('Address');
                  });

                  it('has the correct placeholder text', function () {
                    expect(addressInput.props().placeholder).toEqual('Address');
                  });

                  it('updates the address when the input is changed', function () {
                    var mockSetAddress = jest.fn();

                    wrapper = renderComponent({ setAddress: mockSetAddress });
                    navbarWrapper = wrapper.childAt(0);
                    navbar = navbarWrapper.childAt(0);
                    loginSignupButtonContainer = navbar.childAt(0);
                    signupModal = loginSignupButtonContainer.childAt(1);
                    signupModalDescription = signupModal.childAt(1);
                    signupModalForm = signupModalDescription.childAt(0);
                    firstAddressFormGroup = signupModalForm.childAt(3);
                    addressInput = firstAddressFormGroup.childAt(0);

                    var addressInputOnChangeHandler = addressInput.props().onChange;

                    addressInputOnChangeHandler();

                    expect(mockSetAddress).toHaveBeenCalledTimes(1);
                  });
                });

                describe('City Input', function () {
                  var cityInput = void 0;

                  beforeEach(function () {
                    cityInput = firstAddressFormGroup.childAt(1);
                  });

                  it('is a form input', function () {
                    expect(cityInput.type()).toEqual(_semanticUiReact.Form.Input);
                  });

                  it('has a fluid width', function () {
                    expect(cityInput.props().fluid).toBeTruthy();
                  });

                  it('is labeled correctly', function () {
                    expect(cityInput.props().label).toEqual('City');
                  });

                  it('has the correct placeholder text', function () {
                    expect(cityInput.props().placeholder).toEqual('City');
                  });

                  it('updates the city when the input is changed', function () {
                    var mockSetCity = jest.fn();

                    wrapper = renderComponent({ setCity: mockSetCity });
                    navbarWrapper = wrapper.childAt(0);
                    navbar = navbarWrapper.childAt(0);
                    loginSignupButtonContainer = navbar.childAt(0);
                    signupModal = loginSignupButtonContainer.childAt(1);
                    signupModalDescription = signupModal.childAt(1);
                    signupModalForm = signupModalDescription.childAt(0);
                    firstAddressFormGroup = signupModalForm.childAt(3);
                    cityInput = firstAddressFormGroup.childAt(1);

                    var cityInputOnChangeHandler = cityInput.props().onChange;

                    cityInputOnChangeHandler();

                    expect(mockSetCity).toHaveBeenCalledTimes(1);
                  });
                });
              });

              describe('Form Group - State & Zipcode', function () {
                var secondAddressFormGroup = void 0;

                beforeEach(function () {
                  secondAddressFormGroup = signupModalForm.childAt(4);
                });

                it('is a form group', function () {
                  expect(secondAddressFormGroup.type()).toEqual(_semanticUiReact.Form.Group);
                });

                it('has fields of equal widths', function () {
                  expect(secondAddressFormGroup.props().widths).toEqual('equal');
                });

                describe('State Dropdown', function () {
                  var stateDropdown = void 0;

                  beforeEach(function () {
                    stateDropdown = secondAddressFormGroup.childAt(0);
                  });
                  it('is a form dropdown', function () {
                    expect(stateDropdown.type()).toEqual(_semanticUiReact.Form.Dropdown);
                  });

                  it('has a fluid width', function () {
                    expect(stateDropdown.props().fluid).toBeTruthy();
                  });

                  it('is labeled correctly', function () {
                    expect(stateDropdown.props().label).toEqual('State');
                  });

                  it('has the correct placeholder text', function () {
                    expect(stateDropdown.props().placeholder).toEqual('State');
                  });

                  it('is searchable', function () {
                    expect(stateDropdown.props().search).toBeTruthy();
                  });

                  it('is formatted to look like a form input', function () {
                    expect(stateDropdown.props().selection).toBeTruthy();
                  });

                  it('has the correct options', function () {
                    var fakeOptions = chance.n(function () {
                      return {
                        text: chance.string(),
                        key: chance.string(),
                        value: chance.string()
                      };
                    }, chance.natural({ min: 2, max: 10 }));

                    Common.statekeys = fakeOptions;

                    wrapper = renderComponent();
                    navbarWrapper = wrapper.childAt(0);
                    navbar = navbarWrapper.childAt(0);
                    loginSignupButtonContainer = navbar.childAt(0);
                    signupModal = loginSignupButtonContainer.childAt(1);
                    signupModalDescription = signupModal.childAt(1);
                    signupModalForm = signupModalDescription.childAt(0);
                    secondAddressFormGroup = signupModalForm.childAt(4);
                    stateDropdown = secondAddressFormGroup.childAt(0);

                    expect(stateDropdown.props().options).toEqual(fakeOptions);
                  });

                  it('updates the state when the value changes', function () {
                    var mockSetAddressState = jest.fn();

                    wrapper = renderComponent({ setAddressState: mockSetAddressState });
                    navbarWrapper = wrapper.childAt(0);
                    navbar = navbarWrapper.childAt(0);
                    loginSignupButtonContainer = navbar.childAt(0);
                    signupModal = loginSignupButtonContainer.childAt(1);
                    signupModalDescription = signupModal.childAt(1);
                    signupModalForm = signupModalDescription.childAt(0);
                    secondAddressFormGroup = signupModalForm.childAt(4);
                    stateDropdown = secondAddressFormGroup.childAt(0);

                    var stateDropdownOnChangeHandler = stateDropdown.props().onChange;

                    stateDropdownOnChangeHandler();

                    expect(mockSetAddressState).toHaveBeenCalledTimes(1);
                  });
                });

                describe('Zipcode Input', function () {
                  var zipcodeInput = void 0;

                  beforeEach(function () {
                    zipcodeInput = secondAddressFormGroup.childAt(1);
                  });

                  it('is a form input', function () {
                    expect(zipcodeInput.type()).toEqual(_semanticUiReact.Form.Input);
                  });

                  it('has a fluid width', function () {
                    expect(zipcodeInput.props().fluid).toBeTruthy();
                  });

                  it('is labeled correctly', function () {
                    expect(zipcodeInput.props().label).toEqual('Zipcode');
                  });

                  it('has the correct placeholder text', function () {
                    expect(zipcodeInput.props().placeholder).toEqual('Zipcode');
                  });

                  it('updates the zipcode when the input is changed', function () {
                    var mockSetZipcode = jest.fn();

                    wrapper = renderComponent({ setZipcode: mockSetZipcode });
                    navbarWrapper = wrapper.childAt(0);
                    navbar = navbarWrapper.childAt(0);
                    loginSignupButtonContainer = navbar.childAt(0);
                    signupModal = loginSignupButtonContainer.childAt(1);
                    signupModalDescription = signupModal.childAt(1);
                    signupModalForm = signupModalDescription.childAt(0);
                    secondAddressFormGroup = signupModalForm.childAt(4);
                    zipcodeInput = secondAddressFormGroup.childAt(1);

                    var zipcodeInputOnChangeHandler = zipcodeInput.props().onChange;

                    zipcodeInputOnChangeHandler();

                    expect(mockSetZipcode).toHaveBeenCalledTimes(1);
                  });
                });
              });

              describe('Form Group - Terms and Conditions', function () {
                var termsAndConditionsFormGroup = void 0;

                beforeEach(function () {
                  termsAndConditionsFormGroup = signupModalForm.childAt(5);
                });

                it('is a form group', function () {
                  expect(termsAndConditionsFormGroup.type()).toEqual(_semanticUiReact.Form.Group);
                });

                describe('Terms and Conditions Checkbox', function () {
                  var termsAndConditionsCheckbox = void 0;

                  beforeEach(function () {
                    termsAndConditionsCheckbox = termsAndConditionsFormGroup.childAt(0);
                  });

                  it('is a form checkbox', function () {
                    expect(termsAndConditionsCheckbox.type()).toEqual(_semanticUiReact.Form.Checkbox);
                  });

                  it('has the correct label', function () {
                    expect(termsAndConditionsCheckbox.props().label).toEqual('I agree to the Terms and Conditions');
                  });
                });
              });

              describe('Form Group - Submit', function () {
                var submitFormGroup = void 0;

                beforeEach(function () {
                  submitFormGroup = signupModalForm.childAt(6);
                });

                it('is a form group', function () {
                  expect(submitFormGroup.type()).toEqual(_semanticUiReact.Form.Group);
                });

                describe('Submit Button', function () {
                  var submitButton = void 0;

                  beforeEach(function () {
                    submitButton = submitFormGroup.childAt(0);
                  });

                  it('is a form button', function () {
                    expect(submitButton.type()).toEqual(_semanticUiReact.Form.Button);
                  });

                  it('is a large button', function () {
                    expect(submitButton.props().size).toEqual('large');
                  });

                  it('closes the modal when clicked', function () {
                    var mockCloseModal = jest.fn();

                    wrapper = renderComponent({ closeModal: mockCloseModal });
                    navbarWrapper = wrapper.childAt(0);
                    navbar = navbarWrapper.childAt(0);
                    loginSignupButtonContainer = navbar.childAt(0);
                    signupModal = loginSignupButtonContainer.childAt(1);
                    signupModalDescription = signupModal.childAt(1);
                    signupModalForm = signupModalDescription.childAt(0);
                    submitFormGroup = signupModalForm.childAt(6);
                    submitButton = submitFormGroup.childAt(0);

                    var submitButtonOnClickHandler = submitButton.props().onClick;

                    submitButtonOnClickHandler();

                    expect(mockCloseModal).toHaveBeenCalledTimes(1);
                  });
                });
              });
            });
          });
        });
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,