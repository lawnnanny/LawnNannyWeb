{"version":3,"sources":["HomePage.spec.js"],"names":["Common","describe","wrapper","chance","renderComponent","props","setEmail","jest","fn","setPassword","setFirstName","setLastName","setPasswordRepeat","setAddress","setCity","setAddressState","setZipcode","openLoginModal","closeModal","isLoginModalOpen","undefined","bool","openSignupModal","isSignupModalOpen","beforeEach","it","expect","type","toEqual","navbarWrapper","childAt","navbar","Menu","secondary","toBeTruthy","loginSignupButtonContainer","position","loginModal","Modal","size","mockCloseModal","loginModalOnCloseHandler","onClose","toHaveBeenCalledTimes","closeIcon","fakeIsLoginModalOpen","open","loginModalTrigger","trigger","expectedType","mockOpenLoginModal","loginModalTriggerOnClickHandler","onClick","loginModalTriggerText","text","loginModalHeader","Header","loginModalHeaderText","loginModalDescription","Description","loginModalDescriptionGrid","Grid","assertions","loginModalDescriptionGridRows","children","forEach","row","Row","column","Column","loginButtonRow","centered","loginButtonColumn","width","emailInput","emailInputRow","emailInputColumn","Input","fluid","icon","iconPosition","placeholder","mockSetEmail","emailInputOnChangeHandler","onChange","passwordInput","passwordInputRow","passwordInputColumn","mockSetPassword","passwordInputOnChangeHandler","loginButton","Button","loginButtonOnClickHandler","signupModal","fakeIsSignupModalOpen","signupModalOnCloseHandler","signupModalTrigger","mockOpenSignupModal","signupModalTriggerOnClickHandler","signupModalTriggerText","signupModalHeader","signupModalHeaderText","signupModalDescription","signupModalForm","Form","nameFormGroup","Group","widths","firstNameInput","label","mockSetFirstName","firstNameInputOnChangeHandler","lastNameInput","mockSetLastName","lastNameInputOnChangeHandler","emailFormGroup","passwordFormGroup","passwordRepeatInput","mockSetPasswordRepeat","passwordRepeatInputOnChangeHandler","firstAddressFormGroup","addressInput","mockSetAddress","addressInputOnChangeHandler","cityInput","mockSetCity","cityInputOnChangeHandler","secondAddressFormGroup","stateDropdown","Dropdown","search","selection","fakeOptions","n","string","key","value","natural","min","max","statekeys","options","mockSetAddressState","stateDropdownOnChangeHandler","zipcodeInput","mockSetZipcode","zipcodeInputOnChangeHandler","termsAndConditionsFormGroup","termsAndConditionsCheckbox","Checkbox","submitFormGroup","submitButton","submitButtonOnClickHandler"],"mappings":"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","file":"HomePage.spec.js","sourcesContent":["import React from 'react';\nimport { Menu, Modal, Grid, Input, Button, Form } from 'semantic-ui-react';\nimport { shallow } from 'enzyme';\nimport Chance from 'chance';\nimport HomePage from '../../../src/components/pages/HomePage';\nimport * as Common from '../../../src/helpers/Common';\n\ndescribe('Home Page', () => {\n  let wrapper;\n  let chance;\n\n  const renderComponent = (props = {}) =>\n    shallow(\n      <HomePage\n        setEmail={props.setEmail || jest.fn()}\n        setPassword={props.setPassword || jest.fn()}\n        setFirstName={props.setFirstName || jest.fn()}\n        setLastName={props.setLastName || jest.fn()}\n        setPasswordRepeat={props.setPasswordRepeat || jest.fn()}\n        setAddress={props.setAddress || jest.fn()}\n        setCity={props.setCity || jest.fn()}\n        setAddressState={props.setAddressState || jest.fn()}\n        setZipcode={props.setZipcode || jest.fn()}\n        openLoginModal={props.openLoginModal || jest.fn()}\n        closeModal={props.closeModal || jest.fn()}\n        isLoginModalOpen={\n          props.isLoginModalOpen === undefined ? chance.bool() : props.isLoginModalOpen\n        }\n        openSignupModal={props.openSignupModal || jest.fn()}\n        isSignupModalOpen={\n          props.isSignupModalOpen === undefined ? chance.bool() : props.isSignupModalOpen\n        }\n      />,\n    );\n\n  beforeEach(() => {\n    chance = Chance();\n    wrapper = renderComponent();\n  });\n\n  it('is wrapped in a div', () => {\n    expect(wrapper.type()).toEqual('div');\n  });\n\n  describe('Navbar wrapper', () => {\n    let navbarWrapper;\n\n    beforeEach(() => {\n      navbarWrapper = wrapper.childAt(0);\n    });\n\n    it('is a div', () => {\n      expect(navbarWrapper.type()).toEqual('div');\n    });\n\n    describe('Navbar', () => {\n      let navbar;\n\n      beforeEach(() => {\n        navbar = navbarWrapper.childAt(0);\n      });\n\n      it('is a menu', () => {\n        expect(navbar.type()).toEqual(Menu);\n      });\n\n      it('is styled as a secondary menu', () => {\n        expect(navbar.props().secondary).toBeTruthy();\n      });\n\n      describe('Login/Signup button container', () => {\n        let loginSignupButtonContainer;\n\n        beforeEach(() => {\n          loginSignupButtonContainer = navbar.childAt(0);\n        });\n\n        it('is a menu subcomponent', () => {\n          expect(loginSignupButtonContainer.type()).toEqual(Menu.Menu);\n        });\n\n        it('is positioned correctly', () => {\n          expect(loginSignupButtonContainer.props().position).toEqual('right');\n        });\n\n        describe('Login Modal', () => {\n          let loginModal;\n\n          beforeEach(() => {\n            loginModal = loginSignupButtonContainer.childAt(0);\n          });\n\n          it('is a modal', () => {\n            expect(loginModal.type()).toEqual(Modal);\n          });\n\n          it('is a mini modal', () => {\n            expect(loginModal.props().size).toEqual('mini');\n          });\n\n          it('closes the model when closed', () => {\n            const mockCloseModal = jest.fn();\n\n            wrapper = renderComponent({ closeModal: mockCloseModal });\n            navbarWrapper = wrapper.childAt(0);\n            navbar = navbarWrapper.childAt(0);\n            loginSignupButtonContainer = navbar.childAt(0);\n            loginModal = loginSignupButtonContainer.childAt(0);\n\n            const loginModalOnCloseHandler = loginModal.props().onClose;\n\n            loginModalOnCloseHandler();\n\n            expect(mockCloseModal).toHaveBeenCalledTimes(1);\n          });\n\n          it('displays a close modal button', () => {\n            expect(loginModal.props().closeIcon).toBeTruthy();\n          });\n\n          it('is open depending on what the open prop is', () => {\n            const fakeIsLoginModalOpen = chance.bool();\n\n            wrapper = renderComponent({ isLoginModalOpen: fakeIsLoginModalOpen });\n            navbarWrapper = wrapper.childAt(0);\n            navbar = navbarWrapper.childAt(0);\n            loginSignupButtonContainer = navbar.childAt(0);\n            loginModal = loginSignupButtonContainer.childAt(0);\n\n            expect(loginModal.props().open).toEqual(fakeIsLoginModalOpen);\n          });\n\n          describe('Login Modal trigger', () => {\n            let loginModalTrigger;\n\n            beforeEach(() => {\n              loginModalTrigger = shallow(loginModal.props().trigger);\n            });\n\n            it('is a menu item', () => {\n              const expectedType = shallow(<Menu.Item onClick={jest.fn()} />).type();\n\n              expect(loginModalTrigger.type()).toEqual(expectedType);\n            });\n\n            it('opens the modal when clicked', () => {\n              const mockOpenLoginModal = jest.fn();\n\n              wrapper = renderComponent({ openLoginModal: mockOpenLoginModal });\n              navbarWrapper = wrapper.childAt(0);\n              navbar = navbarWrapper.childAt(0);\n              loginSignupButtonContainer = navbar.childAt(0);\n              loginModal = loginSignupButtonContainer.childAt(0);\n              loginModalTrigger = shallow(loginModal.props().trigger);\n\n              const loginModalTriggerOnClickHandler = loginModalTrigger.props().onClick;\n\n              loginModalTriggerOnClickHandler();\n\n              expect(mockOpenLoginModal).toHaveBeenCalledTimes(1);\n            });\n\n            it('displays the correct word', () => {\n              const loginModalTriggerText = loginModalTrigger.childAt(0);\n\n              expect(loginModalTriggerText.text()).toEqual('Login');\n            });\n          });\n\n          describe('Login Modal Header', () => {\n            let loginModalHeader;\n\n            beforeEach(() => {\n              loginModalHeader = loginModal.childAt(0);\n            });\n\n            it('is a modal header', () => {\n              expect(loginModalHeader.type()).toEqual(Modal.Header);\n            });\n\n            it('displays the correct text', () => {\n              const loginModalHeaderText = loginModalHeader.childAt(0);\n\n              expect(loginModalHeaderText.text()).toEqual('Welcome Back!');\n            });\n          });\n\n          describe('Login Modal Description', () => {\n            let loginModalDescription;\n\n            beforeEach(() => {\n              loginModalDescription = loginModal.childAt(1);\n            });\n\n            it('is a modal description', () => {\n              expect(loginModalDescription.type()).toEqual(Modal.Description);\n            });\n\n            describe('Login Modal Description Grid', () => {\n              let loginModalDescriptionGrid;\n\n              beforeEach(() => {\n                loginModalDescriptionGrid = loginModalDescription.childAt(0);\n              });\n\n              it('is a grid', () => {\n                expect(loginModalDescriptionGrid.type()).toEqual(Grid);\n              });\n\n              it('contains three rows', () => {\n                expect.assertions(3);\n\n                const loginModalDescriptionGridRows = loginModalDescriptionGrid.children();\n\n                loginModalDescriptionGridRows.forEach((row) => {\n                  expect(row.type()).toEqual(Grid.Row);\n                });\n              });\n\n              it('contains a column inside of each row', () => {\n                expect.assertions(3);\n\n                const loginModalDescriptionGridRows = loginModalDescriptionGrid.children();\n\n                loginModalDescriptionGridRows.forEach((row) => {\n                  const column = row.childAt(0);\n\n                  expect(column.type()).toEqual(Grid.Column);\n                });\n              });\n\n              it('contains a row for the login button that is centered', () => {\n                const loginButtonRow = loginModalDescriptionGrid.childAt(2);\n\n                expect(loginButtonRow.props().centered).toBeTruthy();\n              });\n\n              it('contains a row for the login button that has a column with a width of 6', () => {\n                const loginButtonRow = loginModalDescriptionGrid.childAt(2);\n                const loginButtonColumn = loginButtonRow.childAt(0);\n\n                expect(loginButtonColumn.props().width).toEqual(6);\n              });\n\n              describe('Email Input', () => {\n                let emailInput;\n\n                beforeEach(() => {\n                  const emailInputRow = loginModalDescriptionGrid.childAt(0);\n                  const emailInputColumn = emailInputRow.childAt(0);\n\n                  emailInput = emailInputColumn.childAt(0);\n                });\n\n                it('is an input', () => {\n                  expect(emailInput.type()).toEqual(Input);\n                });\n\n                it('has a fluid width', () => {\n                  expect(emailInput.props().fluid).toBeTruthy();\n                });\n\n                it('has a user icon', () => {\n                  expect(emailInput.props().icon).toEqual('user');\n                });\n\n                it('positions the icon on the left side', () => {\n                  expect(emailInput.props().iconPosition).toEqual('left');\n                });\n\n                it('displays the correct placeholder text', () => {\n                  expect(emailInput.props().placeholder).toEqual('someone@example.com');\n                });\n\n                it('sets the email when the value changes', () => {\n                  const mockSetEmail = jest.fn();\n\n                  wrapper = renderComponent({ setEmail: mockSetEmail });\n                  navbarWrapper = wrapper.childAt(0);\n                  navbar = navbarWrapper.childAt(0);\n                  loginSignupButtonContainer = navbar.childAt(0);\n                  loginModal = loginSignupButtonContainer.childAt(0);\n                  loginModalDescription = loginModal.childAt(1);\n                  loginModalDescriptionGrid = loginModalDescription.childAt(0);\n\n                  const emailInputRow = loginModalDescriptionGrid.childAt(0);\n                  const emailInputColumn = emailInputRow.childAt(0);\n\n                  emailInput = emailInputColumn.childAt(0);\n\n                  const emailInputOnChangeHandler = emailInput.props().onChange;\n\n                  emailInputOnChangeHandler();\n\n                  expect(mockSetEmail).toHaveBeenCalledTimes(1);\n                });\n              });\n\n              describe('Password Input', () => {\n                let passwordInput;\n\n                beforeEach(() => {\n                  const passwordInputRow = loginModalDescriptionGrid.childAt(1);\n                  const passwordInputColumn = passwordInputRow.childAt(0);\n\n                  passwordInput = passwordInputColumn.childAt(0);\n                });\n\n                it('is an input', () => {\n                  expect(passwordInput.type()).toEqual(Input);\n                });\n\n                it('has a fluid width', () => {\n                  expect(passwordInput.props().fluid).toBeTruthy();\n                });\n\n                it('has a user icon', () => {\n                  expect(passwordInput.props().icon).toEqual('lock');\n                });\n\n                it('is a type input', () => {\n                  expect(passwordInput.props().type).toEqual('password');\n                });\n\n                it('positions the icon on the left side', () => {\n                  expect(passwordInput.props().iconPosition).toEqual('left');\n                });\n\n                it('displays the correct placeholder text', () => {\n                  expect(passwordInput.props().placeholder).toEqual('Password');\n                });\n\n                it('sets the password when the value changes', () => {\n                  const mockSetPassword = jest.fn();\n\n                  wrapper = renderComponent({ setPassword: mockSetPassword });\n                  navbarWrapper = wrapper.childAt(0);\n                  navbar = navbarWrapper.childAt(0);\n                  loginSignupButtonContainer = navbar.childAt(0);\n                  loginModal = loginSignupButtonContainer.childAt(0);\n                  loginModalDescription = loginModal.childAt(1);\n                  loginModalDescriptionGrid = loginModalDescription.childAt(0);\n\n                  const passwordInputRow = loginModalDescriptionGrid.childAt(1);\n                  const passwordInputColumn = passwordInputRow.childAt(0);\n\n                  passwordInput = passwordInputColumn.childAt(0);\n\n                  const passwordInputOnChangeHandler = passwordInput.props().onChange;\n\n                  passwordInputOnChangeHandler();\n\n                  expect(mockSetPassword).toHaveBeenCalledTimes(1);\n                });\n              });\n\n              describe('Login Button', () => {\n                let loginButton;\n\n                beforeEach(() => {\n                  const loginButtonRow = loginModalDescriptionGrid.childAt(2);\n                  const loginButtonColumn = loginButtonRow.childAt(0);\n\n                  loginButton = loginButtonColumn.childAt(0);\n                });\n\n                it('is a button', () => {\n                  expect(loginButton.type()).toEqual(Button);\n                });\n                it('is a large size', () => {\n                  expect(loginButton.props().size).toEqual('large');\n                });\n\n                it('closes the login modal when clicked', () => {\n                  const mockCloseModal = jest.fn();\n\n                  wrapper = renderComponent({ closeModal: mockCloseModal });\n                  navbarWrapper = wrapper.childAt(0);\n                  navbar = navbarWrapper.childAt(0);\n                  loginSignupButtonContainer = navbar.childAt(0);\n                  loginModal = loginSignupButtonContainer.childAt(0);\n                  loginModalDescription = loginModal.childAt(1);\n                  loginModalDescriptionGrid = loginModalDescription.childAt(0);\n\n                  const loginButtonRow = loginModalDescriptionGrid.childAt(2);\n                  const loginButtonColumn = loginButtonRow.childAt(0);\n\n                  loginButton = loginButtonColumn.childAt(0);\n\n                  const loginButtonOnClickHandler = loginButton.props().onClick;\n\n                  loginButtonOnClickHandler();\n\n                  expect(mockCloseModal).toHaveBeenCalledTimes(1);\n                });\n              });\n            });\n          });\n        });\n\n        describe('Signup Modal', () => {\n          let signupModal;\n\n          beforeEach(() => {\n            signupModal = loginSignupButtonContainer.childAt(1);\n          });\n\n          it('is a modal', () => {\n            expect(signupModal.type()).toEqual(Modal);\n          });\n\n          it('is a tiny modal', () => {\n            expect(signupModal.props().size).toEqual('tiny');\n          });\n\n          it('is open depending on the value of the open prop', () => {\n            const fakeIsSignupModalOpen = chance.bool();\n\n            wrapper = renderComponent({ isSignupModalOpen: fakeIsSignupModalOpen });\n            navbarWrapper = wrapper.childAt(0);\n            navbar = navbarWrapper.childAt(0);\n            loginSignupButtonContainer = navbar.childAt(0);\n            signupModal = loginSignupButtonContainer.childAt(1);\n\n            expect(signupModal.props().open).toEqual(fakeIsSignupModalOpen);\n          });\n\n          it('closes the modal when closed', () => {\n            const mockCloseModal = jest.fn();\n\n            wrapper = renderComponent({ closeModal: mockCloseModal });\n            navbarWrapper = wrapper.childAt(0);\n            navbar = navbarWrapper.childAt(0);\n            loginSignupButtonContainer = navbar.childAt(0);\n            signupModal = loginSignupButtonContainer.childAt(1);\n\n            const signupModalOnCloseHandler = signupModal.props().onClose;\n\n            signupModalOnCloseHandler();\n\n            expect(mockCloseModal).toHaveBeenCalledTimes(1);\n          });\n\n          it('displays a close icon', () => {\n            expect(signupModal.props().closeIcon).toBeTruthy();\n          });\n\n          describe('Signup Modal trigger', () => {\n            let signupModalTrigger;\n\n            beforeEach(() => {\n              signupModalTrigger = shallow(signupModal.props().trigger);\n            });\n\n            it('is a menu item', () => {\n              const expectedType = shallow(<Menu.Item onClick={jest.fn()} />).type();\n\n              expect(signupModalTrigger.type()).toEqual(expectedType);\n            });\n\n            it('opens the modal when clicked', () => {\n              const mockOpenSignupModal = jest.fn();\n\n              wrapper = renderComponent({ openSignupModal: mockOpenSignupModal });\n              navbarWrapper = wrapper.childAt(0);\n              navbar = navbarWrapper.childAt(0);\n              loginSignupButtonContainer = navbar.childAt(0);\n              signupModal = loginSignupButtonContainer.childAt(1);\n              signupModalTrigger = shallow(signupModal.props().trigger);\n\n              const signupModalTriggerOnClickHandler = signupModalTrigger.props().onClick;\n\n              signupModalTriggerOnClickHandler();\n\n              expect(mockOpenSignupModal).toHaveBeenCalledTimes(1);\n            });\n\n            it('displays the correct word', () => {\n              const signupModalTriggerText = signupModalTrigger.childAt(0);\n\n              expect(signupModalTriggerText.text()).toEqual('Sign Up');\n            });\n          });\n\n          describe('Signup Modal Header', () => {\n            let signupModalHeader;\n\n            beforeEach(() => {\n              signupModalHeader = signupModal.childAt(0);\n            });\n\n            it('is a modal header', () => {\n              expect(signupModalHeader.type()).toEqual(Modal.Header);\n            });\n\n            it('displays the correct message', () => {\n              const signupModalHeaderText = signupModalHeader.childAt(0);\n\n              expect(signupModalHeaderText.text()).toEqual('Sign Up!');\n            });\n          });\n\n          describe('Signup Modal Description', () => {\n            let signupModalDescription;\n\n            beforeEach(() => {\n              signupModalDescription = signupModal.childAt(1);\n            });\n\n            it('is a modal description', () => {\n              expect(signupModalDescription.type()).toEqual(Modal.Description);\n            });\n\n            describe('Signup Modal Form', () => {\n              let signupModalForm;\n\n              beforeEach(() => {\n                signupModalForm = signupModalDescription.childAt(0);\n              });\n\n              it('is a form', () => {\n                expect(signupModalForm.type()).toEqual(Form);\n              });\n\n              describe('Form Group - Name', () => {\n                let nameFormGroup;\n\n                beforeEach(() => {\n                  nameFormGroup = signupModalForm.childAt(0);\n                });\n\n                it('is a form group', () => {\n                  expect(nameFormGroup.type()).toEqual(Form.Group);\n                });\n\n                it('has fields of equal widths', () => {\n                  expect(nameFormGroup.props().widths).toEqual('equal');\n                });\n\n                describe('First Name Input', () => {\n                  let firstNameInput;\n\n                  beforeEach(() => {\n                    firstNameInput = nameFormGroup.childAt(0);\n                  });\n\n                  it('is a form input', () => {\n                    expect(firstNameInput.type()).toEqual(Form.Input);\n                  });\n\n                  it('has a fluid width', () => {\n                    expect(firstNameInput.props().fluid).toBeTruthy();\n                  });\n\n                  it('is labeled correctly', () => {\n                    expect(firstNameInput.props().label).toEqual('First Name');\n                  });\n\n                  it('has the correct placeholder text', () => {\n                    expect(firstNameInput.props().placeholder).toEqual('First Name');\n                  });\n\n                  it('updates the first name when the input is changed', () => {\n                    const mockSetFirstName = jest.fn();\n\n                    wrapper = renderComponent({ setFirstName: mockSetFirstName });\n                    navbarWrapper = wrapper.childAt(0);\n                    navbar = navbarWrapper.childAt(0);\n                    loginSignupButtonContainer = navbar.childAt(0);\n                    signupModal = loginSignupButtonContainer.childAt(1);\n                    signupModalDescription = signupModal.childAt(1);\n                    signupModalForm = signupModalDescription.childAt(0);\n                    nameFormGroup = signupModalForm.childAt(0);\n                    firstNameInput = nameFormGroup.childAt(0);\n\n                    const firstNameInputOnChangeHandler = firstNameInput.props().onChange;\n\n                    firstNameInputOnChangeHandler();\n\n                    expect(mockSetFirstName).toHaveBeenCalledTimes(1);\n                  });\n                });\n\n                describe('Last Name Input', () => {\n                  let lastNameInput;\n\n                  beforeEach(() => {\n                    lastNameInput = nameFormGroup.childAt(1);\n                  });\n\n                  it('is a form input', () => {\n                    expect(lastNameInput.type()).toEqual(Form.Input);\n                  });\n\n                  it('has a fluid width', () => {\n                    expect(lastNameInput.props().fluid).toBeTruthy();\n                  });\n\n                  it('is labeled correctly', () => {\n                    expect(lastNameInput.props().label).toEqual('Last Name');\n                  });\n\n                  it('has the correct placeholder text', () => {\n                    expect(lastNameInput.props().placeholder).toEqual('Last Name');\n                  });\n\n                  it('updates the last name when the input is changed', () => {\n                    const mockSetLastName = jest.fn();\n\n                    wrapper = renderComponent({ setLastName: mockSetLastName });\n                    navbarWrapper = wrapper.childAt(0);\n                    navbar = navbarWrapper.childAt(0);\n                    loginSignupButtonContainer = navbar.childAt(0);\n                    signupModal = loginSignupButtonContainer.childAt(1);\n                    signupModalDescription = signupModal.childAt(1);\n                    signupModalForm = signupModalDescription.childAt(0);\n                    nameFormGroup = signupModalForm.childAt(0);\n                    lastNameInput = nameFormGroup.childAt(1);\n\n                    const lastNameInputOnChangeHandler = lastNameInput.props().onChange;\n\n                    lastNameInputOnChangeHandler();\n\n                    expect(mockSetLastName).toHaveBeenCalledTimes(1);\n                  });\n                });\n              });\n\n              describe('Form Group - Email', () => {\n                let emailFormGroup;\n\n                beforeEach(() => {\n                  emailFormGroup = signupModalForm.childAt(1);\n                });\n\n                it('is a form group', () => {\n                  expect(emailFormGroup.type()).toEqual(Form.Group);\n                });\n\n                it('has fields of equal widths', () => {\n                  expect(emailFormGroup.props().widths).toEqual('equal');\n                });\n\n                describe('Email Input', () => {\n                  let emailInput;\n\n                  beforeEach(() => {\n                    emailInput = emailFormGroup.childAt(0);\n                  });\n\n                  it('is a form input', () => {\n                    expect(emailInput.type()).toEqual(Form.Input);\n                  });\n\n                  it('has a fluid width', () => {\n                    expect(emailInput.props().fluid).toBeTruthy();\n                  });\n\n                  it('is labeled correctly', () => {\n                    expect(emailInput.props().label).toEqual('Email');\n                  });\n\n                  it('has the correct placeholder text', () => {\n                    expect(emailInput.props().placeholder).toEqual('someone@example.com');\n                  });\n\n                  it('updates the email when the input is changed', () => {\n                    const mockSetEmail = jest.fn();\n\n                    wrapper = renderComponent({ setEmail: mockSetEmail });\n                    navbarWrapper = wrapper.childAt(0);\n                    navbar = navbarWrapper.childAt(0);\n                    loginSignupButtonContainer = navbar.childAt(0);\n                    signupModal = loginSignupButtonContainer.childAt(1);\n                    signupModalDescription = signupModal.childAt(1);\n                    signupModalForm = signupModalDescription.childAt(0);\n                    emailFormGroup = signupModalForm.childAt(1);\n                    emailInput = emailFormGroup.childAt(0);\n\n                    const emailInputOnChangeHandler = emailInput.props().onChange;\n\n                    emailInputOnChangeHandler();\n\n                    expect(mockSetEmail).toHaveBeenCalledTimes(1);\n                  });\n                });\n              });\n              describe('Form Group - Password', () => {\n                let passwordFormGroup;\n\n                beforeEach(() => {\n                  passwordFormGroup = signupModalForm.childAt(2);\n                });\n\n                it('is a form group', () => {\n                  expect(passwordFormGroup.type()).toEqual(Form.Group);\n                });\n\n                it('has fields of equal widths', () => {\n                  expect(passwordFormGroup.props().widths).toEqual('equal');\n                });\n\n                describe('Password Input', () => {\n                  let passwordInput;\n\n                  beforeEach(() => {\n                    passwordInput = passwordFormGroup.childAt(0);\n                  });\n\n                  it('is a form input', () => {\n                    expect(passwordInput.type()).toEqual(Form.Input);\n                  });\n\n                  it('has a fluid width', () => {\n                    expect(passwordInput.props().fluid).toBeTruthy();\n                  });\n\n                  it('is labeled correctly', () => {\n                    expect(passwordInput.props().label).toEqual('Password');\n                  });\n\n                  it('has type set to password', () => {\n                    expect(passwordInput.props().type).toEqual('password');\n                  });\n\n                  it('has the correct placeholder text', () => {\n                    expect(passwordInput.props().placeholder).toEqual('Password');\n                  });\n\n                  it('updates the password when the input is changed', () => {\n                    const mockSetPassword = jest.fn();\n\n                    wrapper = renderComponent({ setPassword: mockSetPassword });\n                    navbarWrapper = wrapper.childAt(0);\n                    navbar = navbarWrapper.childAt(0);\n                    loginSignupButtonContainer = navbar.childAt(0);\n                    signupModal = loginSignupButtonContainer.childAt(1);\n                    signupModalDescription = signupModal.childAt(1);\n                    signupModalForm = signupModalDescription.childAt(0);\n                    passwordFormGroup = signupModalForm.childAt(2);\n                    passwordInput = passwordFormGroup.childAt(0);\n\n                    const passwordInputOnChangeHandler = passwordInput.props().onChange;\n\n                    passwordInputOnChangeHandler();\n\n                    expect(mockSetPassword).toHaveBeenCalledTimes(1);\n                  });\n                });\n\n                describe('Password Repeat Input', () => {\n                  let passwordRepeatInput;\n\n                  beforeEach(() => {\n                    passwordRepeatInput = passwordFormGroup.childAt(1);\n                  });\n\n                  it('is a form input', () => {\n                    expect(passwordRepeatInput.type()).toEqual(Form.Input);\n                  });\n\n                  it('has a fluid width', () => {\n                    expect(passwordRepeatInput.props().fluid).toBeTruthy();\n                  });\n\n                  it('is labeled correctly', () => {\n                    expect(passwordRepeatInput.props().label).toEqual('Repeat Password');\n                  });\n\n                  it('has type set to password', () => {\n                    expect(passwordRepeatInput.props().type).toEqual('password');\n                  });\n\n                  it('has the correct placeholder text', () => {\n                    expect(passwordRepeatInput.props().placeholder).toEqual('Repeat Password');\n                  });\n\n                  it('updates the repeated password when the input is changed', () => {\n                    const mockSetPasswordRepeat = jest.fn();\n\n                    wrapper = renderComponent({ setPasswordRepeat: mockSetPasswordRepeat });\n                    navbarWrapper = wrapper.childAt(0);\n                    navbar = navbarWrapper.childAt(0);\n                    loginSignupButtonContainer = navbar.childAt(0);\n                    signupModal = loginSignupButtonContainer.childAt(1);\n                    signupModalDescription = signupModal.childAt(1);\n                    signupModalForm = signupModalDescription.childAt(0);\n                    passwordFormGroup = signupModalForm.childAt(2);\n                    passwordRepeatInput = passwordFormGroup.childAt(1);\n\n                    const passwordRepeatInputOnChangeHandler = passwordRepeatInput.props().onChange;\n\n                    passwordRepeatInputOnChangeHandler();\n\n                    expect(mockSetPasswordRepeat).toHaveBeenCalledTimes(1);\n                  });\n                });\n              });\n\n              describe('Form Group - Address & City', () => {\n                let firstAddressFormGroup;\n\n                beforeEach(() => {\n                  firstAddressFormGroup = signupModalForm.childAt(3);\n                });\n\n                it('is a form group', () => {\n                  expect(firstAddressFormGroup.type()).toEqual(Form.Group);\n                });\n\n                it('has fields of equal widths', () => {\n                  expect(firstAddressFormGroup.props().widths).toEqual('equal');\n                });\n\n                describe('Address Input', () => {\n                  let addressInput;\n\n                  beforeEach(() => {\n                    addressInput = firstAddressFormGroup.childAt(0);\n                  });\n\n                  it('is a form input', () => {\n                    expect(addressInput.type()).toEqual(Form.Input);\n                  });\n\n                  it('has a fluid width', () => {\n                    expect(addressInput.props().fluid).toBeTruthy();\n                  });\n\n                  it('is labeled correctly', () => {\n                    expect(addressInput.props().label).toEqual('Address');\n                  });\n\n                  it('has the correct placeholder text', () => {\n                    expect(addressInput.props().placeholder).toEqual('Address');\n                  });\n\n                  it('updates the address when the input is changed', () => {\n                    const mockSetAddress = jest.fn();\n\n                    wrapper = renderComponent({ setAddress: mockSetAddress });\n                    navbarWrapper = wrapper.childAt(0);\n                    navbar = navbarWrapper.childAt(0);\n                    loginSignupButtonContainer = navbar.childAt(0);\n                    signupModal = loginSignupButtonContainer.childAt(1);\n                    signupModalDescription = signupModal.childAt(1);\n                    signupModalForm = signupModalDescription.childAt(0);\n                    firstAddressFormGroup = signupModalForm.childAt(3);\n                    addressInput = firstAddressFormGroup.childAt(0);\n\n                    const addressInputOnChangeHandler = addressInput.props().onChange;\n\n                    addressInputOnChangeHandler();\n\n                    expect(mockSetAddress).toHaveBeenCalledTimes(1);\n                  });\n                });\n\n                describe('City Input', () => {\n                  let cityInput;\n\n                  beforeEach(() => {\n                    cityInput = firstAddressFormGroup.childAt(1);\n                  });\n\n                  it('is a form input', () => {\n                    expect(cityInput.type()).toEqual(Form.Input);\n                  });\n\n                  it('has a fluid width', () => {\n                    expect(cityInput.props().fluid).toBeTruthy();\n                  });\n\n                  it('is labeled correctly', () => {\n                    expect(cityInput.props().label).toEqual('City');\n                  });\n\n                  it('has the correct placeholder text', () => {\n                    expect(cityInput.props().placeholder).toEqual('City');\n                  });\n\n                  it('updates the city when the input is changed', () => {\n                    const mockSetCity = jest.fn();\n\n                    wrapper = renderComponent({ setCity: mockSetCity });\n                    navbarWrapper = wrapper.childAt(0);\n                    navbar = navbarWrapper.childAt(0);\n                    loginSignupButtonContainer = navbar.childAt(0);\n                    signupModal = loginSignupButtonContainer.childAt(1);\n                    signupModalDescription = signupModal.childAt(1);\n                    signupModalForm = signupModalDescription.childAt(0);\n                    firstAddressFormGroup = signupModalForm.childAt(3);\n                    cityInput = firstAddressFormGroup.childAt(1);\n\n                    const cityInputOnChangeHandler = cityInput.props().onChange;\n\n                    cityInputOnChangeHandler();\n\n                    expect(mockSetCity).toHaveBeenCalledTimes(1);\n                  });\n                });\n              });\n\n              describe('Form Group - State & Zipcode', () => {\n                let secondAddressFormGroup;\n\n                beforeEach(() => {\n                  secondAddressFormGroup = signupModalForm.childAt(4);\n                });\n\n                it('is a form group', () => {\n                  expect(secondAddressFormGroup.type()).toEqual(Form.Group);\n                });\n\n                it('has fields of equal widths', () => {\n                  expect(secondAddressFormGroup.props().widths).toEqual('equal');\n                });\n\n                describe('State Dropdown', () => {\n                  let stateDropdown;\n\n                  beforeEach(() => {\n                    stateDropdown = secondAddressFormGroup.childAt(0);\n                  });\n                  it('is a form dropdown', () => {\n                    expect(stateDropdown.type()).toEqual(Form.Dropdown);\n                  });\n\n                  it('has a fluid width', () => {\n                    expect(stateDropdown.props().fluid).toBeTruthy();\n                  });\n\n                  it('is labeled correctly', () => {\n                    expect(stateDropdown.props().label).toEqual('State');\n                  });\n\n                  it('has the correct placeholder text', () => {\n                    expect(stateDropdown.props().placeholder).toEqual('State');\n                  });\n\n                  it('is searchable', () => {\n                    expect(stateDropdown.props().search).toBeTruthy();\n                  });\n\n                  it('is formatted to look like a form input', () => {\n                    expect(stateDropdown.props().selection).toBeTruthy();\n                  });\n\n                  it('has the correct options', () => {\n                    const fakeOptions = chance.n(\n                      () => ({\n                        text: chance.string(),\n                        key: chance.string(),\n                        value: chance.string(),\n                      }),\n                      chance.natural({ min: 2, max: 10 }),\n                    );\n\n                    Common.statekeys = fakeOptions;\n\n                    wrapper = renderComponent();\n                    navbarWrapper = wrapper.childAt(0);\n                    navbar = navbarWrapper.childAt(0);\n                    loginSignupButtonContainer = navbar.childAt(0);\n                    signupModal = loginSignupButtonContainer.childAt(1);\n                    signupModalDescription = signupModal.childAt(1);\n                    signupModalForm = signupModalDescription.childAt(0);\n                    secondAddressFormGroup = signupModalForm.childAt(4);\n                    stateDropdown = secondAddressFormGroup.childAt(0);\n\n                    expect(stateDropdown.props().options).toEqual(fakeOptions);\n                  });\n\n                  it('updates the state when the value changes', () => {\n                    const mockSetAddressState = jest.fn();\n\n                    wrapper = renderComponent({ setAddressState: mockSetAddressState });\n                    navbarWrapper = wrapper.childAt(0);\n                    navbar = navbarWrapper.childAt(0);\n                    loginSignupButtonContainer = navbar.childAt(0);\n                    signupModal = loginSignupButtonContainer.childAt(1);\n                    signupModalDescription = signupModal.childAt(1);\n                    signupModalForm = signupModalDescription.childAt(0);\n                    secondAddressFormGroup = signupModalForm.childAt(4);\n                    stateDropdown = secondAddressFormGroup.childAt(0);\n\n                    const stateDropdownOnChangeHandler = stateDropdown.props().onChange;\n\n                    stateDropdownOnChangeHandler();\n\n                    expect(mockSetAddressState).toHaveBeenCalledTimes(1);\n                  });\n                });\n\n                describe('Zipcode Input', () => {\n                  let zipcodeInput;\n\n                  beforeEach(() => {\n                    zipcodeInput = secondAddressFormGroup.childAt(1);\n                  });\n\n                  it('is a form input', () => {\n                    expect(zipcodeInput.type()).toEqual(Form.Input);\n                  });\n\n                  it('has a fluid width', () => {\n                    expect(zipcodeInput.props().fluid).toBeTruthy();\n                  });\n\n                  it('is labeled correctly', () => {\n                    expect(zipcodeInput.props().label).toEqual('Zipcode');\n                  });\n\n                  it('has the correct placeholder text', () => {\n                    expect(zipcodeInput.props().placeholder).toEqual('Zipcode');\n                  });\n\n                  it('updates the zipcode when the input is changed', () => {\n                    const mockSetZipcode = jest.fn();\n\n                    wrapper = renderComponent({ setZipcode: mockSetZipcode });\n                    navbarWrapper = wrapper.childAt(0);\n                    navbar = navbarWrapper.childAt(0);\n                    loginSignupButtonContainer = navbar.childAt(0);\n                    signupModal = loginSignupButtonContainer.childAt(1);\n                    signupModalDescription = signupModal.childAt(1);\n                    signupModalForm = signupModalDescription.childAt(0);\n                    secondAddressFormGroup = signupModalForm.childAt(4);\n                    zipcodeInput = secondAddressFormGroup.childAt(1);\n\n                    const zipcodeInputOnChangeHandler = zipcodeInput.props().onChange;\n\n                    zipcodeInputOnChangeHandler();\n\n                    expect(mockSetZipcode).toHaveBeenCalledTimes(1);\n                  });\n                });\n              });\n\n              describe('Form Group - Terms and Conditions', () => {\n                let termsAndConditionsFormGroup;\n\n                beforeEach(() => {\n                  termsAndConditionsFormGroup = signupModalForm.childAt(5);\n                });\n\n                it('is a form group', () => {\n                  expect(termsAndConditionsFormGroup.type()).toEqual(Form.Group);\n                });\n\n                describe('Terms and Conditions Checkbox', () => {\n                  let termsAndConditionsCheckbox;\n\n                  beforeEach(() => {\n                    termsAndConditionsCheckbox = termsAndConditionsFormGroup.childAt(0);\n                  });\n\n                  it('is a form checkbox', () => {\n                    expect(termsAndConditionsCheckbox.type()).toEqual(Form.Checkbox);\n                  });\n\n                  it('has the correct label', () => {\n                    expect(termsAndConditionsCheckbox.props().label).toEqual(\n                      'I agree to the Terms and Conditions',\n                    );\n                  });\n                });\n              });\n\n              describe('Form Group - Submit', () => {\n                let submitFormGroup;\n\n                beforeEach(() => {\n                  submitFormGroup = signupModalForm.childAt(6);\n                });\n\n                it('is a form group', () => {\n                  expect(submitFormGroup.type()).toEqual(Form.Group);\n                });\n\n                describe('Submit Button', () => {\n                  let submitButton;\n\n                  beforeEach(() => {\n                    submitButton = submitFormGroup.childAt(0);\n                  });\n\n                  it('is a form button', () => {\n                    expect(submitButton.type()).toEqual(Form.Button);\n                  });\n\n                  it('is a large button', () => {\n                    expect(submitButton.props().size).toEqual('large');\n                  });\n\n                  it('closes the modal when clicked', () => {\n                    const mockCloseModal = jest.fn();\n\n                    wrapper = renderComponent({ closeModal: mockCloseModal });\n                    navbarWrapper = wrapper.childAt(0);\n                    navbar = navbarWrapper.childAt(0);\n                    loginSignupButtonContainer = navbar.childAt(0);\n                    signupModal = loginSignupButtonContainer.childAt(1);\n                    signupModalDescription = signupModal.childAt(1);\n                    signupModalForm = signupModalDescription.childAt(0);\n                    submitFormGroup = signupModalForm.childAt(6);\n                    submitButton = submitFormGroup.childAt(0);\n\n                    const submitButtonOnClickHandler = submitButton.props().onClick;\n\n                    submitButtonOnClickHandler();\n\n                    expect(mockCloseModal).toHaveBeenCalledTimes(1);\n                  });\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n});\n"]}