{"version":3,"sources":["DynamicForm.js"],"names":["DynamicForm","props","onSubmit","data","state","Requests","form","fields","forEach","element","type","field","id","entry","dataForSubmitting","validation","validateAndSetStateErrorsForDisplay","setRequest","route","errors","Object","values","validationEntryObject","trim","length","setState","keys","processChange","key","handle","e","value","addAstricks","errorPropertyTextArea","error","backgroundColor","borderColor","renderInput","isInRow","InLineErrorStyle","Styles","InLineErrorInput","InLineErrorInputRow","label","name","placeholder","InlineError","renderDropDown","statekeys","InLineErrorDropdown","renderTextArea","InLineErrorTextArea","renderCheckbox","renderRadio","renderRadioButtons","options","renderRowFromJson","style","group","renderFormFromJson","radioButtons","map","option","subForm","formUI","defaultRender","jsonForm","Dynamicsegment","description","formSegment","button","React","Component","propTypes","PropTypes","func","isRequired","string"],"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","file":"DynamicForm.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Form,\n  Header,\n  Input,\n  Button,\n  Segment,\n  Checkbox,\n  TextArea,\n  Dropdown,\n} from 'semantic-ui-react';\nimport { statekeys } from '../../helpers/Common';\nimport Styles from '../../styles/DynamicForm';\nimport InlineError from './InlineError';\n\nclass DynamicForm extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {\n      errors: {},\n      dataForSubmitting: {},\n      Requests: props.jsonForm(),\n    };\n  }\n\n  onSubmit = () => {\n    const data = {};\n    this.state.Requests[this.props.form].fields.forEach((element) => {\n      if (element.type === 'rowCombination') {\n        element.fields.forEach((field) => {\n          data[field.id] = {\n            entry: this.state.dataForSubmitting[field.id],\n            validation: field.validation,\n            id: field.id,\n            type: field.type,\n          };\n        });\n      } else {\n        data[element.id] = {\n          entry: this.state.dataForSubmitting[element.id],\n          validation: element.validation,\n          id: element.id,\n          type: element.type,\n        };\n      }\n    });\n    if (this.validateAndSetStateErrorsForDisplay(data)) {\n      this.props.setRequest(data);\n      this.props.route();\n    }\n  };\n\n  validateAndSetStateErrorsForDisplay = (data) => {\n    const errors = {};\n    Object.values(data).forEach((validationEntryObject) => {\n      if (validationEntryObject.validation === 'required') {\n        if (!validationEntryObject.entry || !validationEntryObject.entry.trim().length) {\n          switch (validationEntryObject.type) {\n            case 'textArea':\n              errors[validationEntryObject.id] = 'Empty Text Box';\n              break;\n            case 'input':\n              errors[validationEntryObject.id] = 'Field is Required';\n              break;\n            case 'dropDown':\n              errors[validationEntryObject.id] = 'Nothing is Selected';\n              break;\n            case 'radio':\n              errors[validationEntryObject.id] = 'Selection is Required';\n              break;\n            case 'checkbox':\n              errors[validationEntryObject.id] = 'Selection is Required';\n              break;\n            default:\n          }\n        }\n      }\n    });\n    this.setState({ errors });\n    return !Object.keys(errors).length;\n  };\n\n  processChange = (key) => {\n    const handle = (e, { value }) => {\n      const state = this.state;\n      state.dataForSubmitting[key] = value;\n      this.setState(state);\n    };\n    return handle;\n  };\n\n  addAstricks = (validation) => {\n    if (validation) {\n      return ' * ';\n    }\n    return '';\n  };\n\n  errorPropertyTextArea = (error) => {\n    if (error) {\n      return { backgroundColor: '#f6f5f3', borderColor: '#ffb4b0' };\n    }\n    return {};\n  };\n\n  renderInput = (field, isInRow, errors) => {\n    let InLineErrorStyle = Styles.InLineErrorInput;\n    if (isInRow) {\n      InLineErrorStyle = Styles.InLineErrorInputRow;\n    }\n    return (\n      <Form.Field style={Styles.field}>\n        <label style={Styles.label} htmlFor={field.id}>\n          {this.addAstricks(field.validation) + field.name}\n        </label>\n        <Form.Input\n          error={errors[field.id]}\n          onChange={this.processChange(field.id)}\n          placeholder={field.placeholder}\n        />\n        <div style={InLineErrorStyle}>\n          {errors[field.id] && (\n            <InlineError text={errors[field.id]} pointing style={Styles.InlineError} />\n          )}\n        </div>\n      </Form.Field>\n    );\n  };\n  renderDropDown = (field, isInRow, errors) => (\n    <Form.Field style={Styles.field}>\n      <label style={Styles.label} htmlFor={field.id}>\n        {this.addAstricks(field.validation) + field.name}\n      </label>\n      <Dropdown\n        search\n        error={errors[field.id]}\n        value={this.state[field.id]}\n        onChange={this.processChange(field.id)}\n        id={field.id}\n        placeholder={field.placeholder}\n        options={statekeys}\n        fluid\n        selection\n      />\n      <div style={Styles.InLineErrorDropdown}>\n        {errors[field.id] && <InlineError text={errors[field.id]} pointing />}\n      </div>\n    </Form.Field>\n  );\n\n  renderTextArea = (field, isInRow, errors) => (\n    <Form.Field style={Styles.field}>\n      <label style={Styles.label} htmlFor={field.id}>\n        {this.addAstricks(field.validation) + field.name}\n      </label>\n      <TextArea\n        style={this.errorPropertyTextArea(errors[field.id])}\n        error={errors[field.id]}\n        id={field.id}\n        placeholder={field.placeholder}\n        onChange={this.processChange(field.id)}\n      />\n      <div style={Styles.InLineErrorTextArea}>\n        {errors[field.id] && <InlineError text={errors[field.id]} pointing />}\n      </div>\n    </Form.Field>\n  );\n\n  renderCheckbox = (field, isInRow, errors) => (\n    <Form.Field style={Styles.field}>\n      <label style={Styles.label} htmlFor={field.id}>\n        {this.addAstricks(field.validation) + field.name}\n      </label>\n      <Checkbox\n        error={errors[field.id]}\n        name={field.name}\n        onChange={this.processChange(field.id)}\n        value=\"true\"\n      />\n      {errors[field.id] && <InlineError text={errors[field.id]} pointing=\"left\" />}\n    </Form.Field>\n  );\n\n  renderRadio = (field, isInRow, errors) => (\n    <Form.Field style={Styles.field}>\n      <label style={Styles.label} htmlFor={field.id}>\n        {this.addAstricks(field.validation) + field.name}\n      </label>\n      <Form.Group id={field.id} inline>\n        {this.renderRadioButtons(field.id, field.options)}\n        {errors[field.id] && <InlineError text={errors[field.id]} />}\n      </Form.Group>\n    </Form.Field>\n  );\n\n  renderRowFromJson = (field, style, errors) => (\n    <Form.Group width={field.fields.length} style={Styles.group} unstackable>\n      {this.renderFormFromJson(field, true, errors)}\n    </Form.Group>\n  );\n\n  renderRadioButtons = (id, field) => {\n    const radioButtons = field.map(option => (\n      <Form.Radio\n        label={option}\n        value={option}\n        onChange={this.processChange(id)}\n        checked={this.state.dataForSubmitting[id] === option}\n      />\n    ));\n    return radioButtons;\n  };\n\n  renderFormFromJson = (subForm, isInRow, errors) => {\n    const formUI = subForm.fields.map((field) => {\n      switch (field.type) {\n        case 'input':\n          return this.renderInput(field, isInRow, errors);\n        case 'rowCombination':\n          return this.renderRowFromJson(field, isInRow, errors);\n        case 'dropDown':\n          return this.renderDropDown(field, isInRow, errors);\n        case 'textArea':\n          return this.renderTextArea(field, isInRow, errors);\n        case 'checkbox':\n          return this.renderCheckbox(field, isInRow, errors);\n        case 'radio':\n          return this.renderRadio(field, isInRow, errors);\n        default:\n          return this.defaultRender(field, isInRow, errors);\n      }\n    });\n    return formUI;\n  };\n\n  render() {\n    return (\n      <Segment padded style={Styles.Dynamicsegment}>\n        <Header as=\"h3\">{this.state.Requests[this.props.form].description}</Header>\n        <Segment style={Styles.formSegment}>\n          <Form onSubmit={this.onSubmit}>\n            {this.renderFormFromJson(\n              this.state.Requests[this.props.form],\n              false,\n              this.state.errors,\n            )}\n            <Form.Button positive fluid style={Styles.button}>\n              Continue\n            </Form.Button>\n          </Form>\n        </Segment>\n      </Segment>\n    );\n  }\n}\n\nDynamicForm.propTypes = {\n  jsonForm: PropTypes.func.isRequired,\n  form: PropTypes.string.isRequired,\n  setRequest: PropTypes.func.isRequired,\n  route: PropTypes.func.isRequired,\n};\n\nexport default DynamicForm;\n"]}