{"version":3,"sources":["DynamicForm.spec.js"],"names":["chance","Chance","randomType","integer","createRandomOptions","options","numberOfOptions","counter","string","generateTestFormJson","name","jsonForm","numberOfFields","fields","type","field","id","validation","placeholder","describe","wrapper","setRequest","jest","fn","testJson","console","log","route","renderComponent","Object","keys","beforeEach","it","expect","toEqual","Segment","props","padded","toBeTruthy","header","childAt","Header","size","text","to","equal","values","form","segmentOfFields","Form","forEach","jsxField","label","Checkbox","Radio","TextArea","Dropdown","Input","submitSegment","button","Button"],"mappings":"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","file":"DynamicForm.spec.js","sourcesContent":["import React from 'react';\nimport { Button, Form, Segment, Header, Radio, Checkbox, TextArea, Dropdown, Input } from 'semantic-ui-react';\nimport { shallow } from 'enzyme';\nimport { Chance } from 'chance';\nimport DynamicFormComponent from '../../../src/components/helpers/DynamicForm';\n\nconst chance = new Chance();\n\nconst randomType = () => {\n  switch (chance.integer() % 4) {\n    case 0:\n      return 'textArea';\n    case 1:\n      return 'radio';\n    case 2:\n      return 'checkbox';\n    case 3:\n      return 'input';\n    default:\n      return 'textArea';\n  }\n};\n\nconst createRandomOptions = () => {\n  const options = [];\n  const numberOfOptions = (chance.integer() % 11) + 1;\n  for (let counter = 0; counter < numberOfOptions; counter += 1) {\n    options[counter] = chance.string();\n  }\n  return options;\n};\n\nconst generateTestFormJson = () => {\n  const name = chance.string();\n  const jsonForm = {};\n  const numberOfFields = (chance.integer() % 11) + 1;\n  const fields = [];\n  for (let counter = 0; counter < numberOfFields; counter += 1) {\n    const type = randomType();\n\n    const field = {\n      name: chance.string(),\n      type,\n      id: chance.string(),\n    };\n\n    if (chance.integer() % 2 === 0) {\n      field.validation = 'required';\n    }\n    if (type === 'radio') {\n      field.options = createRandomOptions();\n    }\n    if (type === 'textArea' || type === 'input') {\n      field.placeholder = chance.string();\n    }\n\n    fields[counter] = field;\n  }\n  jsonForm[name] = fields;\n  return jsonForm;\n};\n\ndescribe('DynamicForm', () => {\n  let wrapper;\n  const setRequest = jest.fn();\n  const testJson = generateTestFormJson();\n  console.log(testJson);\n  const route = jest.fn();\n  const renderComponent = () =>\n    shallow(\n      <DynamicFormComponent\n        jsonForm={() => testJson}\n        setRequest={setRequest}\n        form={Object.keys(testJson)[0]}\n        route={() => {\n          route();\n        }}\n      />,\n    );\n\n  beforeEach(() => {\n    wrapper = renderComponent();\n  });\n\n  it('is wrapped in a Segment', () => {\n    expect(wrapper.type()).toEqual(Segment);\n  });\n\n  it('is styled as a padded Segment', () => {\n    expect(wrapper.props().padded).toBeTruthy();\n  });\n\n  describe('header', () => {\n    let header;\n\n    beforeEach(() => {\n      header = wrapper.childAt(0);\n    });\n\n    it('is a header', () => {\n      expect(header.type()).toEqual(Header);\n    });\n\n    it('is has a large size', () => {\n      expect(header.props().size).toEqual('large');\n    });\n\n    it('is the correct text in the header', () => {\n      expect(header.text()).to.equal(Object.values(testJson)[0]);\n    });\n  });\n\n  describe('form', () => {\n    let form;\n    let segmentOfFields;\n\n    beforeEach(() => {\n      form = wrapper.childAt(1);\n      segmentOfFields = form.childAt(0);\n    });\n\n    it('is a form', () => {\n      expect(form.type()).toEqual(Form);\n    });\n\n    describe('form data', () => {\n      const counter = 0;\n      testJson[0].forEach((field) => {\n        const jsxField = segmentOfFields.childAt(counter);\n        it(`field ${counter} is correct`, () => {\n          const label = jsxField.childAt(0);\n          if (field.validation) {\n            expect(label.text()).to.equal(`*${field.name}`);\n          } else {\n            expect(label.text()).to.equal(field.name);\n          }\n          expect(jsxField.childAt(1).props().name === field.name);\n          if (field.type === 'checkbox') {\n            expect(jsxField.childAt(1).type()).toEqual(Checkbox);\n          }\n          if (field.type === 'radio') {\n            expect(jsxField.childAt(1).type()).toEqual(Radio);\n          }\n          if (field.type === 'textArea') {\n            expect(jsxField.childAt(1).type()).toEqual(TextArea);\n          }\n          if (field.type === 'dropDown') {\n            expect(jsxField.childAt(1).type()).toEqual(Dropdown);\n          }\n          if (field.type === 'input') {\n            expect(jsxField.childAt(1).type()).toEqual(Input);\n          }\n        });\n      });\n    });\n  });\n\n  describe('Submit Button', () => {\n    let submitSegment;\n\n    beforeEach(() => {\n      submitSegment = wrapper.childAt(1).childAt(1);\n    });\n\n    it('It is a segment', () => {\n      expect(submitSegment.type()).toEqual(Segment);\n    });\n\n    it('There is a button in the segment', () => {\n      const button = submitSegment.childAt(0);\n      expect(button.type()).toEqual(Button);\n    });\n  });\n});\n"]}