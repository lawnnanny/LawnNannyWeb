{"version":3,"sources":["DynamicForm.js"],"names":["DynamicForm","props","onSubmit","data","Requests","requestForm","requestType","fields","forEach","element","id","entry","state","dataForSubmitting","validation","type","validateAndSetStateErrorsForDisplay","setRequest","route","errors","Object","values","validationEntryObject","setState","keys","length","processChange","key","handle","e","value","addAstricks","renderRadioButtons","field","radioButtons","map","option","renderFormFromJson","requests","formUI","name","placeholder","statekeys","options","Styles","segment","React","Component","propTypes","defaultProps","PropTypes","string","func","history"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","file":"DynamicForm.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Form,\n  Header,\n  Input,\n  Button,\n  Segment,\n  Checkbox,\n  TextArea,\n  Dropdown,\n} from 'semantic-ui-react';\nimport { Redirect } from 'react-router';\nimport { Requests } from '../pages/pipeline/jsonRequests';\nimport { statekeys } from '../../helpers/Common';\nimport Styles from '../../styles/DynamicForm';\nimport InlineError from './InlineError';\n\nclass DynamicForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      errors: {},\n      dataForSubmitting: {},\n    };\n  }\n\n  onSubmit = () => {\n    const data = {};\n    Requests[this.props.requestForm][this.props.requestType].fields.forEach((element) => {\n      data[element.id] = {\n        entry: this.state.dataForSubmitting[element.id],\n        validation: element.validation,\n        id: element.id,\n        type: element.type,\n      };\n    });\n    if (this.validateAndSetStateErrorsForDisplay(data)) {\n      this.props.setRequest(data);\n      this.props.route();\n    }\n  };\n\n  validateAndSetStateErrorsForDisplay = (data) => {\n    const errors = {};\n    Object.values(data).forEach((validationEntryObject) => {\n      if (validationEntryObject.validation === 'required') {\n        if (!validationEntryObject.entry) {\n          switch (validationEntryObject.type) {\n            case 'textArea':\n              errors[validationEntryObject.id] = 'Empty Text Box';\n              break;\n            case 'input':\n              errors[validationEntryObject.id] = 'Empty Input';\n              break;\n            case 'dropDown':\n              errors[validationEntryObject.id] = 'No State Selected';\n              break;\n            case 'radio':\n              errors[validationEntryObject.id] = 'Radio Button Not Selected';\n              break;\n            default:\n          }\n        }\n      }\n    });\n    this.setState({ errors });\n    return !Object.keys(errors).length;\n  };\n\n  processChange = (key) => {\n    const handle = (e, { value }) => {\n      const state = this.state;\n      state.dataForSubmitting[key] = value;\n      this.setState(state);\n    };\n    return handle;\n  }\n\n  addAstricks = (validation) => {\n    if (validation) {\n      return ' * ';\n    }\n    return '';\n  };\n\n  renderRadioButtons = (id, field) => {\n    const radioButtons = field.map(option => (\n      <Form.Radio\n        label={option}\n        value={option}\n        onChange={this.processChange(id)}\n        checked={this.state.dataForSubmitting[id] === option}\n      />\n    ));\n    return radioButtons;\n  };\n\n  renderFormFromJson = (requestType, requestForm, errors) => {\n    const requests = Requests[requestForm][requestType];\n    const formUI = requests.fields.map((field) => {\n      switch (field.type) {\n        case 'text':\n          return (\n            <Form.Field>\n              <label htmlFor={field.id}>{this.addAstricks(field.validation) + field.name}</label>\n              <Input id={field.id} onChange={this.processChange(field.id)} />\n              {errors[field.id] && <InlineError text={errors[field.id]} />}\n            </Form.Field>\n          );\n\n        case 'dropDown':\n          return (\n            <Form.Field>\n              <label htmlFor={field.id}>{this.addAstricks(field.validation) + field.name}</label>\n              <Dropdown\n                value={this.state[field.id]}\n                onChange={this.processChange(field.id)}\n                id={field.id}\n                placeholder={field.placeholder}\n                options={statekeys}\n                fluid\n                selection\n              />\n              {errors[field.id] && <InlineError text={errors[field.id]} />}\n            </Form.Field>\n          );\n\n        case 'textArea':\n          return (\n            <Form.Field>\n              <label htmlFor={field.id}>{this.addAstricks(field.validation) + field.name}</label>\n              <TextArea\n                id={field.id}\n                placeholder={field.placeholder}\n                onChange={this.processChange(field.id)}\n              />\n              {errors[field.id] && <InlineError text={errors[field.id]} />}\n            </Form.Field>\n          );\n\n        case 'checkbox':\n          return (\n            <Form.Field>\n              <label htmlFor={field.id}>{this.addAstricks(field.validation) + field.name}</label>\n              <Checkbox name={field.name} onChange={this.processChange(field.id)} value=\"true\" />\n              {errors[field.id] && <InlineError text={errors[field.id]} />}\n            </Form.Field>\n          );\n\n        case 'radio':\n          return (\n            <Form.Field>\n              <label htmlFor={field.id}>{this.addAstricks(field.validation) + field.name}</label>\n              <Form.Group id={field.id} inline>\n                {this.renderRadioButtons(field.id, field.options)}\n                {errors[field.id] && <InlineError text={errors[field.id]} />}\n              </Form.Group>\n            </Form.Field>\n          );\n\n        default:\n          return (\n            <Form.Field>\n              <label htmlFor={field.id}>{this.addAstricks(field.validation) + field.name}</label>\n              <Input id={field.id} onChange={this.processChange(field.id)} />\n              {errors[field.id] && <InlineError text={errors[field.id]} />}\n            </Form.Field>\n          );\n      }\n    });\n    return formUI;\n  };\n\n  render() {\n    return (\n      <Segment padded style={Styles.segment}>\n        <Header size=\"large\">{this.props.requestType}</Header>\n        <Form onSubmit={this.onSubmit}>\n          <Segment style={Styles.segment}>\n            {this.renderFormFromJson(\n              this.props.requestType,\n              this.props.requestForm,\n              this.state.errors,\n            )}\n          </Segment>\n          <Segment style={Styles.segment}>\n            <Button type=\"submit\" fluid positive size=\"large\">\n              Continue\n            </Button>\n          </Segment>\n        </Form>\n      </Segment>\n    );\n  }\n}\n\nDynamicForm.propTypes = {};\nDynamicForm.defaultProps = {\n  requestType: PropTypes.string,\n  requestForm: PropTypes.string,\n  setRequest: PropTypes.func,\n  history: PropTypes.func,\n};\n\nexport default DynamicForm;\n"]}