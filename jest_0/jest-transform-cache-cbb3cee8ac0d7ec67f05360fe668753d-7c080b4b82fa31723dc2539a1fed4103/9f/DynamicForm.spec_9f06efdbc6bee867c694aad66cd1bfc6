bcffef951df219ce4dd5cd8336bb0f9f
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _enzyme = require('enzyme');

var _chance = require('chance');

var _DynamicForm = require('../../../src/components/helpers/DynamicForm');

var _DynamicForm2 = _interopRequireDefault(_DynamicForm);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var chance = new _chance.Chance();

var randomType = function randomType() {
  switch (chance.integer() % 4) {
    case 0:
      return 'textArea';
    case 1:
      return 'radio';
    case 2:
      return 'checkbox';
    case 3:
      return 'input';
    default:
      return 'textArea';
  }
};

var createRandomOptions = function createRandomOptions() {
  var options = [];
  var numberOfOptions = chance.integer() % 11 + 1;
  for (var counter = 0; counter < numberOfOptions; counter += 1) {
    options[counter] = chance.word();
  }
  return options;
};

var generateTestFormJson = function generateTestFormJson() {
  var name = chance.word();
  var jsonForm = {};
  var numberOfFields = chance.integer() % 11 + 1;
  var fields = [];
  for (var counter = 0; counter < numberOfFields; counter += 1) {
    var type = randomType();

    var field = {
      name: chance.word(),
      type: type,
      id: chance.word()
    };

    if (chance.integer() % 2 === 0) {
      field.validation = 'required';
    }
    if (type === 'radio') {
      field.options = createRandomOptions();
    }
    if (type === 'textArea' || type === 'input') {
      field.placeholder = chance.word();
    }

    fields[counter] = field;
  }
  jsonForm[name] = {};
  jsonForm[name].fields = fields;
  return jsonForm;
};

describe('DynamicForm', function () {
  var wrapper = void 0;
  var setRequest = jest.fn();
  var testJson = generateTestFormJson();
  var _route = jest.fn();
  var renderComponent = function renderComponent() {
    return (0, _enzyme.shallow)(_react2.default.createElement(_DynamicForm2.default, {
      jsonForm: function jsonForm() {
        return testJson;
      },
      setRequest: setRequest,
      form: Object.keys(testJson)[0],
      route: function route() {
        _route();
      }
    }));
  };

  beforeEach(function () {
    wrapper = renderComponent();
  });

  it('is wrapped in a Segment', function () {
    expect(wrapper.type()).toEqual(_semanticUiReact.Segment);
  });

  it('is styled as a padded Segment', function () {
    expect(wrapper.props().padded).toBeTruthy();
  });

  describe('header', function () {
    var header = void 0;

    beforeEach(function () {
      header = wrapper.childAt(0);
    });

    it('is a header', function () {
      expect(header.type()).toEqual(_semanticUiReact.Header);
    });

    it('is has a large size', function () {
      expect(header.props().size).toEqual('large');
    });

    it('is the correct text in the header', function () {
      console.log(header.debug());
      expect(header.value()).toEqual(Object.keys(testJson)[0]);
    });
  });

  describe('form', function () {
    var form = void 0;
    var segmentOfFields = void 0;

    beforeEach(function () {
      form = wrapper.childAt(1);
      segmentOfFields = form.childAt(0);
    });

    it('is a form', function () {
      expect(form.type()).toEqual(_semanticUiReact.Form);
    });

    describe('form data', function () {
      var counter = 0;
      testJson[0].forEach(function (field) {
        var jsxField = segmentOfFields.childAt(counter);
        it('field ' + counter + ' is correct', function () {
          var label = jsxField.childAt(0);
          if (field.validation) {
            expect(label.text()).toEqual('*' + field.name);
          } else {
            expect(label.text()).toEqual(field.name);
          }
          expect(jsxField.childAt(1).props().name === field.name);
          if (field.type === 'checkbox') {
            expect(jsxField.childAt(1).type()).toEqual(_semanticUiReact.Checkbox);
          }
          if (field.type === 'radio') {
            expect(jsxField.childAt(1).type()).toEqual(_semanticUiReact.Radio);
          }
          if (field.type === 'textArea') {
            expect(jsxField.childAt(1).type()).toEqual(_semanticUiReact.TextArea);
          }
          if (field.type === 'dropDown') {
            expect(jsxField.childAt(1).type()).toEqual(_semanticUiReact.Dropdown);
          }
          if (field.type === 'input') {
            expect(jsxField.childAt(1).type()).toEqual(_semanticUiReact.Input);
          }
        });
      });
    });
  });

  describe('Submit Button', function () {
    var submitSegment = void 0;

    beforeEach(function () {
      submitSegment = wrapper.childAt(1).childAt(1);
    });

    it('It is a segment', function () {
      expect(submitSegment.type()).toEqual(_semanticUiReact.Segment);
    });

    it('There is a button in the segment', function () {
      var button = submitSegment.childAt(0);
      expect(button.type()).toEqual(_semanticUiReact.Button);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,