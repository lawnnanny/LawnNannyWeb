{"version":3,"sources":["requestInformation.spec.js"],"names":["describe","wrapper","renderComponent","beforeEach","it","expect","type","toEqual","Grid","props","container","toBeTruthy","assertions","GridRows","children","forEach","row","Row","BreadcrumbRow","childAt","BreadcrumbSegment","Segment","Breadcrumb","BreadcrumbComponent","activeStep","FormRow","FormSegment","form","DynamicFormComponent"],"mappings":"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","file":"requestInformation.spec.js","sourcesContent":["import React from 'react';\nimport { Grid, Segment } from 'semantic-ui-react';\nimport { shallow } from 'enzyme';\nimport RequestInformationComponent from '../../../../src/components/pages/pipeline/requestInformation';\nimport BreadcrumbComponent from '../../../../src/components/helpers/breadcrumb';\nimport DynamicFormComponent from '../../../../src/components/helpers/DynamicForm';\n\ndescribe('RequestInformation', () => {\n  let wrapper;\n\n  const renderComponent = () =>\n    shallow(<RequestInformationComponent typeOfRequest=\"Lawn Mowing\" />);\n\n  beforeEach(() => {\n    wrapper = renderComponent();\n  });\n\n  it('is wrapped in a Grid Container', () => {\n    expect(wrapper.type()).toEqual(Grid);\n  });\n\n  it('is styled as a container Grid', () => {\n    expect(wrapper.props().container).toBeTruthy();\n  });\n\n  it('contains two rows', () => {\n    expect.assertions(2);\n\n    const GridRows = wrapper.children();\n\n    GridRows.forEach((row) => {\n      expect(row.type()).toEqual(Grid.Row);\n    });\n  });\n\n  describe('BreadcrumbRow', () => {\n    let BreadcrumbRow;\n\n    beforeEach(() => {\n      BreadcrumbRow = wrapper.childAt(0);\n    });\n\n    it('is a Breadcrumb Row', () => {\n      expect(BreadcrumbRow.type()).toEqual(Grid.Row);\n    });\n\n    describe('BreadcrumbSegment', () => {\n      let BreadcrumbSegment;\n\n      beforeEach(() => {\n        BreadcrumbSegment = BreadcrumbRow.childAt(0);\n      });\n\n      it('is a Breadcrumb Segment', () => {\n        expect(BreadcrumbSegment.type()).toEqual(Segment);\n      });\n\n      describe('BreadcrumbComponent', () => {\n        let Breadcrumb;\n\n        beforeEach(() => {\n          Breadcrumb = BreadcrumbSegment.childAt(0);\n        });\n\n        it('is a breadcrumb', () => {\n          expect(Breadcrumb.type()).toEqual(BreadcrumbComponent);\n        });\n        it('has an active step', () => {\n          expect(Breadcrumb.props().activeStep).toEqual(1);\n        });\n      });\n    });\n  });\n\n  describe('FormRow', () => {\n    let FormRow;\n\n    beforeEach(() => {\n      FormRow = wrapper.childAt(1);\n    });\n\n    it('is a Form Row', () => {\n      expect(FormRow.type()).toEqual(Grid.Row);\n    });\n\n    describe('FormSegment', () => {\n      let FormSegment;\n\n      beforeEach(() => {\n        FormSegment = FormRow.childAt(0);\n      });\n\n      it('is a Form Segment', () => {\n        expect(FormSegment.type()).toEqual(Segment);\n      });\n\n      describe('Form', () => {\n        let form;\n\n        beforeEach(() => {\n          form = FormSegment.childAt(0);\n        });\n\n        it('is a Form', () => {\n          expect(form.type()).toEqual(DynamicFormComponent);\n        });\n        it('has the correct requestForm', () => {\n          expect(form.props().form).toEqual('Lawn Mowing');\n        });\n      });\n    });\n  });\n});\n"]}