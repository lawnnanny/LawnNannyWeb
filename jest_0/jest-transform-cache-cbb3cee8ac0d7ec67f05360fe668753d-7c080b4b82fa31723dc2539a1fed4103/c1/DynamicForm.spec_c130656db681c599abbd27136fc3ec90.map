{"version":3,"sources":["DynamicForm.spec.js"],"names":["chance","Chance","randomType","useRowCombination","integer","createRandomOptions","options","numberOfOptions","counter","word","generateTestFormJson","name","jsonForm","numberOfFields","fields","type","field","numberOfSubFields","subFields","count","subFieldType","subField","id","validation","placeholder","describe","wrapper","setRequest","jest","fn","testJson","route","renderComponent","Object","keys","beforeEach","it","expect","toEqual","Segment","props","padded","toBeTruthy","header","childAt","Header","size","debug","Form","forEach","fail","form","segmentOfFields","label","text","Checkbox","Radio","state","errors","setState","update","find","InlineErrorComponent","TextArea","Dropdown","Group","subFieldCounter","input","rowInput","Input","submitSegment","button","Button"],"mappings":"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","file":"DynamicForm.spec.js","sourcesContent":["import React from 'react';\nimport {\n  Button,\n  Form,\n  Segment,\n  Header,\n  Radio,\n  Checkbox,\n  TextArea,\n  Dropdown,\n  Input,\n} from 'semantic-ui-react';\nimport { shallow } from 'enzyme';\nimport { Chance } from 'chance';\nimport DynamicFormComponent from '../../../src/components/helpers/DynamicForm';\nimport InlineErrorComponent from '../../../src/components/helpers/InlineError';\n\nconst chance = new Chance();\n\nconst randomType = (useRowCombination) => {\n  switch (chance.integer() % 5) {\n    case 0:\n      return 'textArea';\n    case 1:\n      return 'radio';\n    case 2:\n      return 'checkbox';\n    case 3:\n      return 'input';\n    case 4:\n      if (useRowCombination) {\n        return 'rowCombination';\n      }\n      return 'input';\n    default:\n      return 'textArea';\n  }\n};\n\nconst createRandomOptions = () => {\n  const options = [];\n  const numberOfOptions = (chance.integer() % 11) + 1;\n  for (let counter = 0; counter < numberOfOptions; counter += 1) {\n    options[counter] = chance.word();\n  }\n  return options;\n};\n\nconst generateTestFormJson = () => {\n  const name = chance.word();\n  const jsonForm = {};\n  const numberOfFields = (chance.integer() % 11) + 1;\n  const fields = [];\n  for (let counter = 0; counter < numberOfFields; counter += 1) {\n    const type = randomType(true);\n\n    let field = {};\n    if (type === 'rowCombination') {\n      const numberOfSubFields = (chance.integer() % 11) + 1;\n      const subFields = [];\n      for (let count = 0; count < numberOfSubFields; count += 1) {\n        const subFieldType = randomType(false);\n        const subField = {\n          name: chance.word(),\n          type: subFieldType,\n          id: chance.word(),\n        };\n\n        if (chance.integer() % 2 === 0) {\n          subField.validation = 'required';\n        }\n\n        if (type === 'radio') {\n          subField.options = createRandomOptions();\n        }\n\n        if (subFieldType === 'textArea' || type === 'input') {\n          subField.placeholder = chance.word();\n        }\n\n        subFields[count] = subField;\n      }\n\n      field = {\n        name: chance.word(),\n        type: 'rowCombination',\n        fields: subFields,\n      };\n    } else {\n      field = {\n        name: chance.word(),\n        type,\n        id: chance.word(),\n      };\n\n      if (chance.integer() % 2 === 0) {\n        field.validation = 'required';\n      }\n      if (type === 'radio') {\n        field.options = createRandomOptions();\n      }\n      if (type === 'textArea' || type === 'input') {\n        field.placeholder = chance.word();\n      }\n    }\n\n\n    fields[counter] = field;\n  }\n  jsonForm[name] = {};\n  jsonForm[name].fields = fields;\n  return jsonForm;\n};\n\ndescribe('DynamicForm', () => {\n  let wrapper;\n  const setRequest = jest.fn();\n  const testJson = generateTestFormJson();\n  const route = jest.fn();\n  const renderComponent = () =>\n    shallow(\n      <DynamicFormComponent\n        jsonForm={() => testJson}\n        setRequest={setRequest}\n        form={Object.keys(testJson)[0]}\n        route={() => {\n          route();\n        }}\n      />,\n    );\n\n  beforeEach(() => {\n    wrapper = renderComponent();\n  });\n\n  it('is wrapped in a Segment', () => {\n    expect(wrapper.type()).toEqual(Segment);\n  });\n\n  it('is styled as a padded Segment', () => {\n    expect(wrapper.props().padded).toBeTruthy();\n  });\n\n  describe('header', () => {\n    let header;\n\n    beforeEach(() => {\n      header = wrapper.childAt(0);\n    });\n\n    it('is a header', () => {\n      expect(header.type()).toEqual(Header);\n    });\n\n    it('is has a large size', () => {\n      expect(header.props().size).toEqual('large');\n    });\n\n    it('is the correct text in the header', () => {\n      expect(header.childAt(0).debug()).toEqual(Object.keys(testJson)[0]);\n    });\n  });\n\n  describe('form', () => {\n    it('is a form', () => {\n      expect(wrapper.childAt(1).type()).toEqual(Form);\n    });\n\n    describe('form data', () => {\n      wrapper = renderComponent();\n      testJson[Object.keys(testJson)[0]].fields.forEach((field) => {\n        if (field.validation) {\n          const fail = chance.integer() % 2;\n          let count = 0;\n          const form = wrapper.childAt(1);\n          const segmentOfFields = form.childAt(0);\n          it(`field ${count} is correct`, () => {\n            const label = segmentOfFields.childAt(count).childAt(0);\n            if (field.validation) {\n              expect(label.text()).toEqual(` * ${field.name}`);\n            } else {\n              expect(label.text()).toEqual(field.name);\n            }\n            expect(\n              wrapper\n                .childAt(1)\n                .childAt(0)\n                .childAt(count)\n                .childAt(1)\n                .props().name === field.name,\n            );\n            if (field.type === 'checkbox') {\n              expect(\n                wrapper\n                  .childAt(1)\n                  .childAt(0)\n                  .childAt(count)\n                  .childAt(1)\n                  .type(),\n              ).toEqual(Checkbox);\n            }\n            if (field.type === 'radio') {\n              expect(\n                wrapper\n                  .childAt(1)\n                  .childAt(0)\n                  .childAt(count)\n                  .childAt(1)\n                  .type(),\n              ).toEqual(Radio);\n\n              if (fail) {\n                const state = { errors: {} };\n                state.errors[field.id] = 'Radio Button Not Selected';\n                wrapper.setState(state);\n                wrapper.update();\n                expect(\n                  wrapper\n                    .childAt(1)\n                    .childAt(0)\n                    .childAt(count)\n                    .find(InlineErrorComponent)\n                    .props().text,\n                ).toEqual('Radio Button Not Selected');\n              }\n            }\n            if (field.type === 'textArea') {\n              expect(\n                wrapper\n                  .childAt(1)\n                  .childAt(0)\n                  .childAt(count)\n                  .childAt(1)\n                  .type(),\n              ).toEqual(TextArea);\n\n              if (fail) {\n                const state = { errors: {} };\n                state.errors[field.id] = 'Empty Text Box';\n                wrapper.setState(state);\n                wrapper.update();\n                expect(\n                  wrapper\n                    .childAt(1)\n                    .childAt(0)\n                    .childAt(count)\n                    .find(InlineErrorComponent)\n                    .props().text,\n                ).toEqual('Empty Text Box');\n              }\n            }\n            if (field.type === 'dropDown') {\n              expect(\n                wrapper\n                  .childAt(1)\n                  .childAt(0)\n                  .childAt(count)\n                  .childAt(1)\n                  .type(),\n              ).toEqual(Dropdown);\n\n              if (fail) {\n                const state = { errors: {} };\n                state.errors[field.id] = 'Nothing is Selected';\n                wrapper.setState(state);\n                wrapper.update();\n                expect(\n                  wrapper\n                    .childAt(1)\n                    .childAt(0)\n                    .childAt(count)\n                    .find(InlineErrorComponent)\n                    .props().text,\n                ).toEqual('Nothing is Selected');\n              }\n            }\n\n            if (field.type === 'rowCombination') {\n              expect(\n                wrapper\n                  .childAt(1)\n                  .childAt(0)\n                  .childAt(count)\n                  .childAt(1)\n                  .type(),\n              ).toEqual(Form.Group);\n\n              let subFieldCounter = 0;\n              field.fields.forEach((input) => {\n                const rowInput = wrapper\n                  .childAt(1)\n                  .childAt(0)\n                  .childAt(count)\n                  .childAt(1)\n                  .childAt(subFieldCounter);\n\n                switch (input.type) {\n                  case 'input':\n                    expect(rowInput.type()).toEqual(Input);\n                    break;\n                  case 'dropDown':\n                    expect(rowInput.type()).toEqual(Dropdown);\n                    break;\n                  case 'textArea':\n                    expect(rowInput.type()).toEqual(TextArea);\n                    break;\n                  case 'checkbox':\n                    expect(rowInput.type()).toEqual(Checkbox);\n                    break;\n                  case 'radio':\n                    expect(rowInput.type()).toEqual(Checkbox);\n                    break;\n                  default:\n                }\n                if (fail) {\n                  const state = { errors: {} };\n                  state.errors[field.id] = 'Nothing is Selected';\n                  wrapper.setState(state);\n                  wrapper.update();\n                  expect(\n                    wrapper\n                      .childAt(1)\n                      .childAt(0)\n                      .childAt(count)\n                      .find(InlineErrorComponent)\n                      .props().text,\n                  ).toEqual('Nothing is Selected');\n                }\n                subFieldCounter += 1;\n              });\n            }\n\n            if (field.type === 'input') {\n              expect(\n                wrapper\n                  .childAt(1)\n                  .childAt(0)\n                  .childAt(count)\n                  .childAt(1)\n                  .type(),\n              ).toEqual(Input);\n\n              if (fail) {\n                const state = { errors: {} };\n                state.errors[field.id] = 'Empty Input';\n                wrapper.setState(state);\n                wrapper.update();\n                expect(\n                  wrapper\n                    .childAt(1)\n                    .childAt(0)\n                    .childAt(count)\n                    .find(InlineErrorComponent)\n                    .props().text,\n                ).toEqual('Empty Input');\n              }\n            }\n            count += 1;\n          });\n        }\n      });\n    });\n  });\n\n  describe('Submit Button', () => {\n    let submitSegment;\n\n    beforeEach(() => {\n      submitSegment = wrapper.childAt(1).childAt(1);\n    });\n\n    it('It is a segment', () => {\n      expect(submitSegment.type()).toEqual(Segment);\n    });\n\n    it('There is a button in the segment', () => {\n      const button = submitSegment.childAt(0);\n      expect(button.type()).toEqual(Button);\n    });\n  });\n});\n"]}