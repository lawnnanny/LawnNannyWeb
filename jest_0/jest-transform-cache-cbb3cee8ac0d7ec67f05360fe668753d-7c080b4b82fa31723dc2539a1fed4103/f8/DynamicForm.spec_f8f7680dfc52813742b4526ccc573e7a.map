{"version":3,"sources":["DynamicForm.spec.js"],"names":["describe","wrapper","renderComponent","beforeEach","childAt","it","expect","type","toEqual","Segment","props","padded","toBeTruthy","header","Header","size","form","Form","submitSegment","button","Button"],"mappings":";;AAAA;;;;AACA;;AACA;;AACA;;;;;;AAEAA,SAAS,aAAT,EAAwB,YAAM;AAC5B,MAAIC,gBAAJ;AACA,MAAMC,kBAAkB,SAAlBA,eAAkB;AAAA,WAAM,qBAAQ,8BAAC,qBAAD,IAAsB,aAAY,aAAlC,GAAR,CAAN;AAAA,GAAxB;;AAEAC,aAAW,YAAM;AACfF,cAAUC,kBAAkBE,OAAlB,CAA0B,CAA1B,CAAV;AACD,GAFD;;AAIAC,KAAG,yBAAH,EAA8B,YAAM;AAClCC,WAAOL,QAAQM,IAAR,EAAP,EAAuBC,OAAvB,CAA+BC,wBAA/B;AACD,GAFD;;AAIAJ,KAAG,+BAAH,EAAoC,YAAM;AACxCC,WAAOL,QAAQS,KAAR,GAAgBC,MAAvB,EAA+BC,UAA/B;AACD,GAFD;;AAIAZ,WAAS,QAAT,EAAmB,YAAM;AACvB,QAAIa,eAAJ;;AAEAV,eAAW,YAAM;AACfU,eAASZ,QAAQG,OAAR,CAAgB,CAAhB,CAAT;AACD,KAFD;;AAIAC,OAAG,aAAH,EAAkB,YAAM;AACtBC,aAAOO,OAAON,IAAP,EAAP,EAAsBC,OAAtB,CAA8BM,uBAA9B;AACD,KAFD;AAGAT,OAAG,eAAH,EAAoB,YAAM;AACxBC,aAAOO,OAAOH,KAAP,GAAeK,IAAtB,EAA4BP,OAA5B,CAAoC,OAApC;AACD,KAFD;AAGD,GAbD;;AAeAR,WAAS,MAAT,EAAiB,YAAM;AACrB,QAAIgB,aAAJ;;AAEAb,eAAW,YAAM;AACfa,aAAOf,QAAQG,OAAR,CAAgB,CAAhB,CAAP;AACD,KAFD;;AAIAC,OAAG,WAAH,EAAgB,YAAM;AACpBC,aAAOU,KAAKT,IAAL,EAAP,EAAoBC,OAApB,CAA4BS,qBAA5B;AACD,KAFD;AAGD,GAVD;;AAYAjB,WAAS,eAAT,EAA0B,YAAM;AAC9B,QAAIkB,sBAAJ;;AAEAf,eAAW,YAAM;AACfe,sBAAgBjB,QAAQG,OAAR,CAAgB,CAAhB,EAAmBA,OAAnB,CAA2B,CAA3B,CAAhB;AACD,KAFD;;AAIAC,OAAG,iBAAH,EAAsB,YAAM;AAC1BC,aAAOY,cAAcX,IAAd,EAAP,EAA6BC,OAA7B,CAAqCC,wBAArC;AACD,KAFD;;AAIAJ,OAAG,kCAAH,EAAuC,YAAM;AAC3C,UAAMc,SAASD,cAAcd,OAAd,CAAsB,CAAtB,CAAf;AACAE,aAAOa,OAAOZ,IAAP,EAAP,EAAsBC,OAAtB,CAA8BY,uBAA9B;AACD,KAHD;AAID,GAfD;AAgBD,CA3DD","file":"DynamicForm.spec.js","sourcesContent":["import React from 'react';\nimport { Button, Form, Segment, Header } from 'semantic-ui-react';\nimport { shallow } from 'enzyme';\nimport DynamicFormComponent from '../../../src/components/helpers/DynamicForm';\n\ndescribe('DynamicForm', () => {\n  let wrapper;\n  const renderComponent = () => shallow(<DynamicFormComponent requestType=\"Lawn Mowing\" />);\n\n  beforeEach(() => {\n    wrapper = renderComponent().childAt(0);\n  });\n\n  it('is wrapped in a Segment', () => {\n    expect(wrapper.type()).toEqual(Segment);\n  });\n\n  it('is styled as a padded Segment', () => {\n    expect(wrapper.props().padded).toBeTruthy();\n  });\n\n  describe('header', () => {\n    let header;\n\n    beforeEach(() => {\n      header = wrapper.childAt(0);\n    });\n\n    it('is a header', () => {\n      expect(header.type()).toEqual(Header);\n    });\n    it('is has a size', () => {\n      expect(header.props().size).toEqual('large');\n    });\n  });\n\n  describe('form', () => {\n    let form;\n\n    beforeEach(() => {\n      form = wrapper.childAt(1);\n    });\n\n    it('is a form', () => {\n      expect(form.type()).toEqual(Form);\n    });\n  });\n\n  describe('Submit Button', () => {\n    let submitSegment;\n\n    beforeEach(() => {\n      submitSegment = wrapper.childAt(1).childAt(1);\n    });\n\n    it('It is a segment', () => {\n      expect(submitSegment.type()).toEqual(Segment);\n    });\n\n    it('There is a button in the segment', () => {\n      const button = submitSegment.childAt(0);\n      expect(button.type()).toEqual(Button);\n    });\n  });\n});\n"]}