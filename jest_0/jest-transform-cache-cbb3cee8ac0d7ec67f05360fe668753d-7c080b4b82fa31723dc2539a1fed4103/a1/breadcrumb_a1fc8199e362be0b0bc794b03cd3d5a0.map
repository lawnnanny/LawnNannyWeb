{"version":3,"sources":["breadcrumb.js"],"names":["returnStatus","selection","id","returnColor","iconColor","returnIcon","icon","Styles","finishedIcon","currentIcon","unfinishedIcon","returnRightBar","bar","rightBarFinished","rightBarUnfinished","returnLeftBar","leftBarFinished","leftBarUnfinished","breadcrumb","grid","row","column","segment","base","appear","enter","leave","props","label","propTypes","activeStep","PropTypes","number","isRequired"],"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","file":"breadcrumb.js","sourcesContent":["import React from 'react';\nimport Transition from 'react-inline-transition-group';\nimport PropTypes from 'prop-types';\nimport { Grid, Icon, Label, Segment } from 'semantic-ui-react';\nimport Styles from '../../styles/breadcrumb';\n\nconst returnStatus = (selection, id) => {\n  if (selection > id) {\n    return 'check';\n  } else if (selection === id) {\n    return 'question';\n  } else if (id === 1) {\n    return 'wpforms';\n  } else if (id === 2) {\n    return 'location arrow';\n  } else if (id === 3) {\n    return 'dollar';\n  } else if (id === 4) {\n    return 'edit outline';\n  }\n  return 'cancel';\n};\nconst returnColor = (iconColor, id) => {\n  if (iconColor > id) {\n    return 'green';\n  } else if (iconColor === id) {\n    return 'blue';\n  }\n  return 'grey';\n};\nconst returnIcon = (icon, id) => {\n  if (icon > id) {\n    return Styles.finishedIcon;\n  } else if (icon === id) {\n    return Styles.currentIcon;\n  }\n  return Styles.unfinishedIcon;\n};\nconst returnRightBar = (bar, id) => {\n  if (bar > id) {\n    return Styles.rightBarFinished;\n  }\n  return Styles.rightBarUnfinished;\n};\nconst returnLeftBar = (bar, id) => {\n  if (bar > id) {\n    return Styles.leftBarFinished;\n  }\n  return Styles.leftBarUnfinished;\n};\nexport const breadcrumb = props => (\n  <Grid columns=\"equal\" style={Styles.grid}>\n    <Grid.Row style={Styles.row}>\n      <Grid.Column style={Styles.column}>\n        <Segment style={Styles.segment}>\n          <Transition\n            childrenStyles={{\n              base: Styles.base,\n              appear: Styles.appear,\n              enter: Styles.appear,\n              leave: Styles.leave,\n            }}\n          >\n            <Icon\n              style={returnIcon(props.icon, 0)}\n              circular\n              size=\"large\"\n              color={returnColor(props.iconColor, 0)}\n              name={returnStatus(props.selection, 0)}\n            />\n          </Transition>\n          <div style={returnRightBar(props.bar, 0)} />\n        </Segment>\n        <Segment style={Styles.segment}>\n          <Label style={Styles.label}>Request</Label>\n        </Segment>\n      </Grid.Column>\n      <Grid.Column style={Styles.column}>\n        <Segment style={Styles.segment}>\n          <Icon\n            circular\n            size=\"large\"\n            style={returnIcon(props.icon, 1)}\n            color={returnColor(props.iconColor, 1)}\n            name={returnStatus(props.selection, 1)}\n          />\n          <div style={returnLeftBar(props.bar, 0)} />\n          <div style={returnRightBar(props.bar, 1)} />\n        </Segment>\n        <Segment style={Styles.segment}>\n          <Label style={Styles.label}>Details</Label>\n        </Segment>\n      </Grid.Column>\n      <Grid.Column style={Styles.column}>\n        <Segment style={Styles.segment}>\n          <Icon\n            circular\n            size=\"large\"\n            style={returnIcon(props.icon, 2)}\n            color={returnColor(props.iconColor, 2)}\n            name={returnStatus(props.selection, 2)}\n          />\n          <div style={returnLeftBar(props.bar, 1)} />\n          <div style={returnRightBar(props.bar, 2)} />\n        </Segment>\n        <Segment style={Styles.segment}>\n          <Label style={Styles.label}>Location</Label>\n        </Segment>\n      </Grid.Column>\n      <Grid.Column style={Styles.column}>\n        <Segment style={Styles.segment}>\n          <Icon\n            circular\n            size=\"large\"\n            style={returnIcon(props.icon, 3)}\n            color={returnColor(props.iconColor, 3)}\n            name={returnStatus(props.selection, 3)}\n          />\n          <div style={returnLeftBar(props.bar, 2)} />\n          <div style={returnRightBar(props.bar, 3)} />\n        </Segment>\n        <Segment style={Styles.segment}>\n          <Label style={Styles.label}>Price</Label>\n        </Segment>\n      </Grid.Column>\n      <Grid.Column style={Styles.column}>\n        <Segment style={Styles.segment}>\n          <Icon\n            circular\n            size=\"large\"\n            style={returnIcon(props.icon, 4)}\n            color={returnColor(props.iconColor, 4)}\n            name={returnStatus(props.selection, 4)}\n          />\n          <div style={returnLeftBar(props.bar, 3)} />\n        </Segment>\n        <Segment style={Styles.segment}>\n          <Label style={Styles.label}>Review</Label>\n        </Segment>\n      </Grid.Column>\n    </Grid.Row>\n  </Grid>\n);\n\nbreadcrumb.propTypes = {\n  activeStep: PropTypes.number.isRequired,\n};\n\nexport default breadcrumb;\n"]}