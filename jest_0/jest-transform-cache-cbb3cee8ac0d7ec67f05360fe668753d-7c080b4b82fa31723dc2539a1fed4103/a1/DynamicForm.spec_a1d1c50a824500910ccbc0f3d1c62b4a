2d36619009e4e24f4c3e7679fe96adf0
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _enzyme = require('enzyme');

var _chance = require('chance');

var _DynamicForm = require('../../../src/components/helpers/DynamicForm');

var _DynamicForm2 = _interopRequireDefault(_DynamicForm);

var _InlineError = require('../../../src/components/helpers/InlineError');

var _InlineError2 = _interopRequireDefault(_InlineError);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var chance = new _chance.Chance();

var numberOfFields = Math.abs(chance.integer()) % 11 + 1;

var randomType = function randomType(useRowCombination) {
  switch (chance.integer() % 5) {
    case 0:
      return 'textArea';
    case 1:
      return 'radio';
    case 2:
      return 'checkbox';
    case 3:
      return 'input';
    case 4:
      if (useRowCombination) {
        return 'rowCombination';
      }
      return 'input';
    default:
      return 'textArea';
  }
};

var failTest = function failTest(wrapper, field, count) {
  if (chance.integer() % 2) {
    var state = { errors: {} };
    state.errors[field.id] = 'Nothing is Selected';
    wrapper.setState(state);
    wrapper.update();
    expect(wrapper.childAt(1).childAt(0).childAt(count).find(_InlineError2.default).props().text).toEqual('Nothing is Selected');
  }
};

var createRandomOptions = function createRandomOptions() {
  var options = [];
  var numberOfOptions = chance.integer() % 11 + 1;
  for (var counter = 0; counter < numberOfOptions; counter += 1) {
    options[counter] = chance.word();
  }
  return options;
};

var generateTestFormJson = function generateTestFormJson() {
  var name = chance.word();
  var jsonForm = {};
  var fields = [];
  for (var counter = 0; counter < numberOfFields; counter += 1) {
    var type = randomType(true);

    var field = {};
    if (type === 'rowCombination') {
      var numberOfSubFields = chance.integer() % 11 + 1;
      var subFields = [];
      for (var count = 0; count < numberOfSubFields; count += 1) {
        var subFieldType = randomType(false);
        var subField = {
          name: chance.word(),
          type: subFieldType,
          id: chance.word()
        };

        if (chance.integer() % 2 === 0) {
          subField.validation = 'required';
        }

        if (type === 'radio') {
          subField.options = createRandomOptions();
        }

        if (subFieldType === 'textArea' || type === 'input') {
          subField.placeholder = chance.word();
        }

        subFields[count] = subField;
      }

      field = {
        name: chance.word(),
        type: 'rowCombination',
        fields: subFields
      };
    } else {
      field = {
        name: chance.word(),
        type: type,
        id: chance.word()
      };

      if (chance.integer() % 2 === 0) {
        field.validation = 'required';
      }
      if (type === 'radio') {
        field.options = createRandomOptions();
      }
      if (type === 'textArea' || type === 'input') {
        field.placeholder = chance.word();
      }
    }

    fields[counter] = field;
  }
  jsonForm[name] = {};
  jsonForm[name].description = chance.word();
  jsonForm[name].fields = fields;
  return jsonForm;
};

describe('DynamicForm', function () {
  var wrapper = void 0;
  var setRequest = jest.fn();
  var testJson = generateTestFormJson();
  var _route = jest.fn();
  var renderComponent = function renderComponent() {
    return (0, _enzyme.shallow)(_react2.default.createElement(_DynamicForm2.default, {
      jsonForm: function jsonForm() {
        return testJson;
      },
      setRequest: setRequest,
      form: Object.keys(testJson)[0],
      route: function route() {
        _route();
      }
    }));
  };

  beforeEach(function () {
    wrapper = renderComponent();
  });

  it('is wrapped in a Segment', function () {
    expect(wrapper.type()).toEqual(_semanticUiReact.Segment);
  });

  it('is styled as a padded Segment', function () {
    expect(wrapper.props().padded).toBeTruthy();
  });

  describe('header', function () {
    var header = void 0;

    beforeEach(function () {
      header = wrapper.childAt(0);
    });

    it('is a header', function () {
      expect(header.type()).toEqual(_semanticUiReact.Header);
    });

    it('is has an as equal to h3', function () {
      expect(header.props().as).toEqual('h3');
    });

    it('is the correct text in the header', function () {
      expect(header.childAt(0).debug()).toEqual(testJson[Object.keys(testJson)[0]].description);
    });
  });
  describe('form segment', function () {
    var formSegment = void 0;

    beforeEach(function () {
      formSegment = wrapper.childAt(1);
    });

    it('is a segment', function () {
      expect(formSegment.type()).toEqual(_semanticUiReact.Segment);
    });

    describe('form', function () {
      var formComponent = void 0;
      beforeEach(function () {
        formComponent = formSegment.childAt(0);
      });
      it('is a form', function () {
        expect(formComponent.type()).toEqual(_semanticUiReact.Form);
      });

      wrapper = renderComponent();
      testJson[Object.keys(testJson)[0]].fields.forEach(function (field) {
        if (field.validation) {
          var count = 0;
          var form = formComponent.childAt(0);
          var segmentOfFields = form.childAt(0);
          it('field ' + count + ' is correct', function () {
            var label = segmentOfFields.childAt(count).childAt(0);
            if (field.validation) {
              expect(label.text()).toEqual(' * ' + field.name);
            } else {
              expect(label.text()).toEqual(field.name);
            }
            expect(wrapper.childAt(1).childAt(0).childAt(count).childAt(1).props().name === field.name);
            if (field.type === 'checkbox') {
              expect(wrapper.childAt(1).childAt(0).childAt(count).childAt(1).type()).toEqual(_semanticUiReact.Checkbox);
            }
            if (field.type === 'radio') {
              expect(wrapper.childAt(1).childAt(0).childAt(count).childAt(1).type()).toEqual(_semanticUiReact.Radio);
              failTest(wrapper, field, count);
            }
            if (field.type === 'textArea') {
              expect(wrapper.childAt(1).childAt(0).childAt(count).childAt(1).type()).toEqual(_semanticUiReact.TextArea);
              failTest(wrapper, field, count);
            }
            if (field.type === 'dropDown') {
              expect(wrapper.childAt(1).childAt(0).childAt(count).childAt(1).type()).toEqual(_semanticUiReact.Dropdown);
              failTest(wrapper, field, count);
            }

            if (field.type === 'rowCombination') {
              expect(wrapper.childAt(1).childAt(0).childAt(count).childAt(1).type()).toEqual(_semanticUiReact.Form.Group);

              var subFieldCounter = 0;
              field.fields.forEach(function (input) {
                var rowInput = wrapper.childAt(1).childAt(0).childAt(count).childAt(1).childAt(subFieldCounter);

                switch (input.type) {
                  case 'input':
                    expect(rowInput.type()).toEqual(_semanticUiReact.Input);
                    break;
                  case 'dropDown':
                    expect(rowInput.type()).toEqual(_semanticUiReact.Dropdown);
                    break;
                  case 'textArea':
                    expect(rowInput.type()).toEqual(_semanticUiReact.TextArea);
                    break;
                  case 'checkbox':
                    expect(rowInput.type()).toEqual(_semanticUiReact.Checkbox);
                    break;
                  case 'radio':
                    expect(rowInput.type()).toEqual(_semanticUiReact.Checkbox);
                    break;
                  default:
                }
                failTest(wrapper, field, count);
                subFieldCounter += 1;
              });
            }

            if (field.type === 'input') {
              expect(wrapper.childAt(1).childAt(0).childAt(count).childAt(1).type()).toEqual(_semanticUiReact.Input);

              failTest(wrapper, field, count);
            }
            count += 1;
          });
        }
      });

      describe('Form Button', function () {
        var formButton = void 0;

        beforeEach(function () {
          formButton = formComponent.childAt(numberOfFields);
        });

        it('It is a button', function () {
          console.log(formComponent.debug());
          console.log(numberOfFields);
          expect(formButton.type()).toEqual(_semanticUiReact.Form.Button);
        });
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,