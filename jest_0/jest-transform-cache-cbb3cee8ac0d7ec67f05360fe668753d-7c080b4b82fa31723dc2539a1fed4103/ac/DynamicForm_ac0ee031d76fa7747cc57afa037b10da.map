{"version":3,"sources":["DynamicForm.js"],"names":["DynamicForm","props","onSubmit","data","state","Requests","form","fields","forEach","element","id","entry","dataForSubmitting","validation","type","validateAndSetStateErrorsForDisplay","setRequest","route","errors","Object","values","validationEntryObject","trim","length","setState","keys","processChange","key","handle","e","value","addAstricks","renderRadioButtons","field","radioButtons","map","option","renderFormFromJson","requestForm","requests","formUI","name","placeholder","statekeys","options","jsonForm","Styles","segment","React","Component","propTypes","PropTypes","func","isRequired","string"],"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","file":"DynamicForm.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Form,\n  Header,\n  Input,\n  Button,\n  Segment,\n  Checkbox,\n  TextArea,\n  Dropdown,\n} from 'semantic-ui-react';\nimport { statekeys } from '../../helpers/Common';\nimport Styles from '../../styles/DynamicForm';\nimport InlineError from './InlineError';\n\n\nclass DynamicForm extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {\n      errors: {},\n      dataForSubmitting: {},\n      Requests: props.jsonForm(),\n    };\n  }\n\n  onSubmit = () => {\n    const data = {};\n    this.state.Requests[this.props.form]\n      .fields.forEach((element) => {\n        data[element.id] = {\n          entry: this.state.dataForSubmitting[element.id],\n          validation: element.validation,\n          id: element.id,\n          type: element.type,\n        };\n      });\n    if (this.validateAndSetStateErrorsForDisplay(data)) {\n      this.props.setRequest(data);\n      this.props.route();\n    }\n  };\n\n  validateAndSetStateErrorsForDisplay = (data) => {\n    const errors = {};\n    Object.values(data).forEach((validationEntryObject) => {\n      if (validationEntryObject.validation === 'required') {\n        if (!validationEntryObject.entry || !validationEntryObject.entry.trim().length) {\n          switch (validationEntryObject.type) {\n            case 'textArea':\n              errors[validationEntryObject.id] = 'Empty Text Box';\n              break;\n            case 'input':\n              errors[validationEntryObject.id] = 'Empty Input';\n              break;\n            case 'dropDown':\n              errors[validationEntryObject.id] = 'Nothing is Selected';\n              break;\n            case 'radio':\n              errors[validationEntryObject.id] = 'Radio Button Not Selected';\n              break;\n            default:\n          }\n        }\n      }\n    });\n    this.setState({ errors });\n    return !Object.keys(errors).length;\n  };\n\n  processChange = (key) => {\n    const handle = (e, { value }) => {\n      const state = this.state;\n      state.dataForSubmitting[key] = value;\n      this.setState(state);\n    };\n    return handle;\n  };\n\n  addAstricks = (validation) => {\n    if (validation) {\n      return ' * ';\n    }\n    return '';\n  };\n\n  renderRadioButtons = (id, field) => {\n    const radioButtons = field.map(option => (\n      <Form.Radio\n        label={option}\n        value={option}\n        onChange={this.processChange(id)}\n        checked={this.state.dataForSubmitting[id] === option}\n      />\n    ));\n    return radioButtons;\n  };\n\n  renderFormFromJson = (form, requestForm, errors) => {\n    const requests = this.state.Requests[form];\n    const formUI = requests.fields.map((field) => {\n      switch (field.type) {\n        case 'text':\n          return (\n            <Form.Field>\n              <label htmlFor={field.id}>{this.addAstricks(field.validation) + field.name}</label>\n              <Input id={field.id} onChange={this.processChange(field.id)} />\n              {errors[field.id] && <InlineError text={errors[field.id]} />}\n            </Form.Field>\n          );\n\n        case 'dropDown':\n          return (\n            <Form.Field>\n              <label htmlFor={field.id}>{this.addAstricks(field.validation) + field.name}</label>\n              <Dropdown\n                value={this.state[field.id]}\n                onChange={this.processChange(field.id)}\n                id={field.id}\n                placeholder={field.placeholder}\n                options={statekeys}\n                fluid\n                selection\n              />\n              {errors[field.id] && <InlineError text={errors[field.id]} />}\n            </Form.Field>\n          );\n\n        case 'textArea':\n          return (\n            <Form.Field>\n              <label htmlFor={field.id}>{this.addAstricks(field.validation) + field.name}</label>\n              <TextArea\n                id={field.id}\n                placeholder={field.placeholder}\n                onChange={this.processChange(field.id)}\n              />\n              {errors[field.id] && <InlineError text={errors[field.id]} />}\n            </Form.Field>\n          );\n\n        case 'checkbox':\n          return (\n            <Form.Field>\n              <label htmlFor={field.id}>{this.addAstricks(field.validation) + field.name}</label>\n              <Checkbox name={field.name} onChange={this.processChange(field.id)} value=\"true\" />\n              {errors[field.id] && <InlineError text={errors[field.id]} />}\n            </Form.Field>\n          );\n\n        case 'radio':\n          return (\n            <Form.Field>\n              <label htmlFor={field.id}>{this.addAstricks(field.validation) + field.name}</label>\n              <Form.Group id={field.id} inline>\n                {this.renderRadioButtons(field.id, field.options)}\n                {errors[field.id] && <InlineError text={errors[field.id]} />}\n              </Form.Group>\n            </Form.Field>\n          );\n\n        default:\n          return (\n            <Form.Field>\n              <label htmlFor={field.id}>{this.addAstricks(field.validation) + field.name}</label>\n              <Input id={field.id} onChange={this.processChange(field.id)} />\n              {errors[field.id] && <InlineError text={errors[field.id]} />}\n            </Form.Field>\n          );\n      }\n    });\n    return formUI;\n  };\n\n  render() {\n    return (\n      <Segment padded style={Styles.segment}>\n        <Header size=\"large\">{this.props.form}</Header>\n        <Form onSubmit={this.onSubmit}>\n          <Segment style={Styles.segment}>\n            {this.renderFormFromJson(\n              this.props.form,\n              this.props.requestForm,\n              this.state.errors,\n            )}\n          </Segment>\n          <Segment style={Styles.segment}>\n            <Button type=\"submit\" fluid positive size=\"large\">\n              Continue\n            </Button>\n          </Segment>\n        </Form>\n      </Segment>\n    );\n  }\n}\n\nDynamicForm.propTypes = {\n  jsonForm: PropTypes.func.isRequired,\n  form: PropTypes.string.isRequired,\n  requestForm: PropTypes.string.isRequired,\n  setRequest: PropTypes.func.isRequired,\n  route: PropTypes.func.isRequired,\n};\n\nexport default DynamicForm;\n"]}