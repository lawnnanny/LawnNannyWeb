{"version":3,"sources":["DynamicForm.spec.js"],"names":["chance","Chance","numberOfFields","Math","abs","integer","randomType","useRowCombination","failTest","wrapper","field","count","state","errors","id","setState","update","expect","childAt","find","InlineErrorComponent","props","text","toEqual","createRandomOptions","options","numberOfOptions","counter","word","generateTestFormJson","name","jsonForm","fields","type","numberOfSubFields","subFields","subFieldType","subField","validation","placeholder","description","describe","setRequest","jest","fn","testJson","route","renderComponent","Object","keys","beforeEach","it","Segment","padded","toBeTruthy","header","Header","as","debug","formSegment","formComponent","Form","console","log","forEach","label","Checkbox","Radio","TextArea","Dropdown","Group","subFieldCounter","input","rowInput","Input","formButton","Button"],"mappings":"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","file":"DynamicForm.spec.js","sourcesContent":["import React from 'react';\nimport {\n  Button,\n  Form,\n  Segment,\n  Header,\n  Radio,\n  Checkbox,\n  TextArea,\n  Dropdown,\n  Input,\n} from 'semantic-ui-react';\nimport { shallow } from 'enzyme';\nimport { Chance } from 'chance';\nimport DynamicFormComponent from '../../../src/components/helpers/DynamicForm';\nimport InlineErrorComponent from '../../../src/components/helpers/InlineError';\n\nconst chance = new Chance();\n\nconst numberOfFields = (Math.abs(chance.integer()) % 11) + 1;\n\nconst randomType = (useRowCombination) => {\n  switch (chance.integer() % 5) {\n    case 0:\n      return 'textArea';\n    case 1:\n      return 'radio';\n    case 2:\n      return 'checkbox';\n    case 3:\n      return 'input';\n    case 4:\n      if (useRowCombination) {\n        return 'rowCombination';\n      }\n      return 'input';\n    default:\n      return 'textArea';\n  }\n};\n\nconst failTest = (wrapper, field, count) => {\n  if (chance.integer() % 2) {\n    const state = { errors: {} };\n    state.errors[field.id] = 'Nothing is Selected';\n    wrapper.setState(state);\n    wrapper.update();\n    expect(\n      wrapper\n        .childAt(1)\n        .childAt(0)\n        .childAt(count)\n        .find(InlineErrorComponent)\n        .props().text,\n    ).toEqual('Nothing is Selected');\n  }\n};\n\nconst createRandomOptions = () => {\n  const options = [];\n  const numberOfOptions = (chance.integer() % 11) + 1;\n  for (let counter = 0; counter < numberOfOptions; counter += 1) {\n    options[counter] = chance.word();\n  }\n  return options;\n};\n\nconst generateTestFormJson = () => {\n  const name = chance.word();\n  const jsonForm = {};\n  const fields = [];\n  for (let counter = 0; counter < numberOfFields; counter += 1) {\n    const type = randomType(true);\n\n    let field = {};\n    if (type === 'rowCombination') {\n      const numberOfSubFields = (chance.integer() % 11) + 1;\n      const subFields = [];\n      for (let count = 0; count < numberOfSubFields; count += 1) {\n        const subFieldType = randomType(false);\n        const subField = {\n          name: chance.word(),\n          type: subFieldType,\n          id: chance.word(),\n        };\n\n        if (chance.integer() % 2 === 0) {\n          subField.validation = 'required';\n        }\n\n        if (type === 'radio') {\n          subField.options = createRandomOptions();\n        }\n\n        if (subFieldType === 'textArea' || type === 'input') {\n          subField.placeholder = chance.word();\n        }\n\n        subFields[count] = subField;\n      }\n\n      field = {\n        name: chance.word(),\n        type: 'rowCombination',\n        fields: subFields,\n      };\n    } else {\n      field = {\n        name: chance.word(),\n        type,\n        id: chance.word(),\n      };\n\n      if (chance.integer() % 2 === 0) {\n        field.validation = 'required';\n      }\n      if (type === 'radio') {\n        field.options = createRandomOptions();\n      }\n      if (type === 'textArea' || type === 'input') {\n        field.placeholder = chance.word();\n      }\n    }\n\n    fields[counter] = field;\n  }\n  jsonForm[name] = {};\n  jsonForm[name].description = chance.word();\n  jsonForm[name].fields = fields;\n  return jsonForm;\n};\n\ndescribe('DynamicForm', () => {\n  let wrapper;\n  const setRequest = jest.fn();\n  const testJson = generateTestFormJson();\n  const route = jest.fn();\n  const renderComponent = () =>\n    shallow(\n      <DynamicFormComponent\n        jsonForm={() => testJson}\n        setRequest={setRequest}\n        form={Object.keys(testJson)[0]}\n        route={() => {\n          route();\n        }}\n      />,\n    );\n\n  beforeEach(() => {\n    wrapper = renderComponent();\n  });\n\n  it('is wrapped in a Segment', () => {\n    expect(wrapper.type()).toEqual(Segment);\n  });\n\n  it('is styled as a padded Segment', () => {\n    expect(wrapper.props().padded).toBeTruthy();\n  });\n\n  describe('header', () => {\n    let header;\n\n    beforeEach(() => {\n      header = wrapper.childAt(0);\n    });\n\n    it('is a header', () => {\n      expect(header.type()).toEqual(Header);\n    });\n\n    it('is has an as equal to h3', () => {\n      expect(header.props().as).toEqual('h3');\n    });\n\n    it('is the correct text in the header', () => {\n      expect(header.childAt(0).debug()).toEqual(testJson[Object.keys(testJson)[0]].description);\n    });\n  });\n  describe('form segment', () => {\n    let formSegment;\n\n    beforeEach(() => {\n      formSegment = wrapper.childAt(1);\n    });\n\n    it('is a segment', () => {\n      expect(formSegment.type()).toEqual(Segment);\n    });\n\n    describe('form', () => {\n      let formComponent;\n      beforeEach(() => {\n        formComponent = formSegment.childAt(0);\n      });\n      it('is a form', () => {\n        expect(formComponent.type()).toEqual(Form);\n      });\n\n      describe('form data', () => {\n        wrapper = renderComponent();\n        formSegment = wrapper.childAt(1);\n        formComponent = formSegment.childAt(0);\n        console.log(formComponent.debug());\n        let count = 0;\n        testJson[Object.keys(testJson)[0]].fields.forEach((field) => {\n          if (field.validation) {\n            it(`field ${count} is correct`, () => {\n              const label = formComponent.childAt(count).childAt(0);\n              console.log(formComponent.childAt(0).debug());\n              console.log(count);\n              console.log(label.debug());\n              if (field.validation) {\n                expect(label.text()).toEqual(` * ${field.name}`);\n              } else {\n                expect(label.text()).toEqual(field.name);\n              }\n              expect(\n                wrapper\n                  .childAt(1)\n                  .childAt(0)\n                  .childAt(count)\n                  .childAt(1)\n                  .props().name === field.name,\n              );\n              if (field.type === 'checkbox') {\n                expect(\n                  wrapper\n                    .childAt(1)\n                    .childAt(0)\n                    .childAt(count)\n                    .childAt(1)\n                    .type(),\n                ).toEqual(Checkbox);\n              }\n              if (field.type === 'radio') {\n                expect(\n                  wrapper\n                    .childAt(1)\n                    .childAt(0)\n                    .childAt(count)\n                    .childAt(1)\n                    .type(),\n                ).toEqual(Radio);\n                failTest(wrapper, field, count);\n              }\n              if (field.type === 'textArea') {\n                expect(\n                  wrapper\n                    .childAt(1)\n                    .childAt(0)\n                    .childAt(count)\n                    .childAt(1)\n                    .type(),\n                ).toEqual(TextArea);\n                failTest(wrapper, field, count);\n              }\n              if (field.type === 'dropDown') {\n                expect(\n                  wrapper\n                    .childAt(1)\n                    .childAt(0)\n                    .childAt(count)\n                    .childAt(1)\n                    .type(),\n                ).toEqual(Dropdown);\n                failTest(wrapper, field, count);\n              }\n\n              if (field.type === 'rowCombination') {\n                expect(\n                  wrapper\n                    .childAt(1)\n                    .childAt(0)\n                    .childAt(count)\n                    .childAt(1)\n                    .type(),\n                ).toEqual(Form.Group);\n\n                let subFieldCounter = 0;\n                field.fields.forEach((input) => {\n                  const rowInput = wrapper\n                    .childAt(1)\n                    .childAt(0)\n                    .childAt(count)\n                    .childAt(1)\n                    .childAt(subFieldCounter);\n\n                  switch (input.type) {\n                    case 'input':\n                      expect(rowInput.type()).toEqual(Input);\n                      break;\n                    case 'dropDown':\n                      expect(rowInput.type()).toEqual(Dropdown);\n                      break;\n                    case 'textArea':\n                      expect(rowInput.type()).toEqual(TextArea);\n                      break;\n                    case 'checkbox':\n                      expect(rowInput.type()).toEqual(Checkbox);\n                      break;\n                    case 'radio':\n                      expect(rowInput.type()).toEqual(Checkbox);\n                      break;\n                    default:\n                  }\n                  failTest(wrapper, field, count);\n                  subFieldCounter += 1;\n                });\n              }\n\n              if (field.type === 'input') {\n                expect(\n                  wrapper\n                    .childAt(1)\n                    .childAt(0)\n                    .childAt(count)\n                    .childAt(1)\n                    .type(),\n                ).toEqual(Input);\n\n                failTest(wrapper, field, count);\n              }\n            });\n          }\n          count += 1;\n        });\n      });\n\n      describe('Form Button', () => {\n        let formButton;\n\n        beforeEach(() => {\n          formButton = formComponent.childAt(numberOfFields);\n        });\n\n        it('It is a button', () => {\n          expect(formButton.type()).toEqual(Form.Button);\n        });\n      });\n    });\n  });\n});\n"]}