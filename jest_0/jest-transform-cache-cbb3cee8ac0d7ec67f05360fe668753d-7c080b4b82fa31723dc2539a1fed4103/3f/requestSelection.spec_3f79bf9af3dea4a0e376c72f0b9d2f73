4002910f16d67a0cd45afd185b31cad9
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzymeRedux = require('enzyme-redux');

var _reduxTestUtils = require('redux-test-utils');

var _reduxMockStore = require('redux-mock-store');

var _reduxMockStore2 = _interopRequireDefault(_reduxMockStore);

var _Actions = require('../../../../src/reducers/Actions');

var _Actions2 = _interopRequireDefault(_Actions);

var _semanticUiReact = require('semantic-ui-react');

var _enzyme = require('enzyme');

var _requestSelection = require('../../../../src/components/pages/pipeline/requestSelection');

var _requestSelection2 = _interopRequireDefault(_requestSelection);

var _breadcrumb = require('../../../../src/components/helpers/breadcrumb');

var _breadcrumb2 = _interopRequireDefault(_breadcrumb);

var _RequestOption = require('../../../../src/components/helpers/RequestOption');

var _RequestOption2 = _interopRequireDefault(_RequestOption);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('RequestSelection', function () {
  var wrapper = void 0;
  var setTypeOfRequest = jest.fn();
  var renderComponent = function renderComponent() {
    return (0, _enzyme.shallow)(_react2.default.createElement(_requestSelection2.default, { setTypeOfRequest: setTypeOfRequest }));
  };

  beforeEach(function () {
    wrapper = renderComponent();
  });

  it('is wrapped in a Grid Container', function () {
    expect(wrapper.type()).toEqual(_semanticUiReact.Grid);
  });

  it('is styled as a container Grid', function () {
    expect(wrapper.props().container).toBeTruthy();
  });

  it('contains five rows', function () {
    expect.assertions(6);

    var GridRows = wrapper.children();

    GridRows.forEach(function (row) {
      expect(row.type()).toEqual(_semanticUiReact.Grid.Row);
    });
  });

  describe('BreadcrumbRow', function () {
    var BreadcrumbRow = void 0;

    beforeEach(function () {
      BreadcrumbRow = wrapper.childAt(0);
    });

    it('is a Breadcrumb Row', function () {
      expect(BreadcrumbRow.type()).toEqual(_semanticUiReact.Grid.Row);
    });

    describe('BreadcrumbSegment', function () {
      var BreadcrumbSegment = void 0;

      beforeEach(function () {
        BreadcrumbSegment = BreadcrumbRow.childAt(0);
      });

      it('is a Breadcrumb Segment', function () {
        expect(BreadcrumbSegment.type()).toEqual(_semanticUiReact.Segment);
      });

      describe('BreadcrumbComponent', function () {
        var Breadcrumb = void 0;

        beforeEach(function () {
          Breadcrumb = BreadcrumbSegment.childAt(0);
        });

        it('is a breadcrumb', function () {
          expect(Breadcrumb.type()).toEqual(_breadcrumb2.default);
        });

        it('has an active step', function () {
          expect(Breadcrumb.props().activeStep).toEqual(0);
        });
      });
    });
  });

  describe('HeaderRow', function () {
    var HeaderRow = void 0;

    beforeEach(function () {
      HeaderRow = wrapper.childAt(1);
    });

    it('is a Header Row', function () {
      expect(HeaderRow.type()).toEqual(_semanticUiReact.Grid.Row);
    });

    describe('HeaderSegment', function () {
      var HeaderSegment = void 0;

      beforeEach(function () {
        HeaderSegment = HeaderRow.childAt(0);
      });

      it('is a Header Segment', function () {
        expect(HeaderSegment.type()).toEqual(_semanticUiReact.Segment);
      });

      describe('Header', function () {
        var header = void 0;

        beforeEach(function () {
          header = HeaderSegment.childAt(0);
        });

        it('is a Header', function () {
          expect(header.type()).toEqual(_semanticUiReact.Header);
        });

        it('is a Header', function () {
          expect(header.props().as).toEqual('h2');
        });

        describe('SubHeader', function () {
          var subHeader = void 0;

          beforeEach(function () {
            subHeader = header.childAt(0);
          });

          it('is a SubHeader', function () {
            expect(subHeader.type()).toEqual(_semanticUiReact.Header.SubHeader);
          });
        });
      });
    });
  });
  describe('LawnMowingRow', function () {
    var LawnMowingRow = void 0;

    beforeEach(function () {
      LawnMowingRow = wrapper.childAt(2);
    });

    it('is a LawnMowing Row', function () {
      expect(LawnMowingRow.type()).toEqual(_semanticUiReact.Grid.Row);
    });

    describe('LawnMowingSegment', function () {
      var LawnMowingSegment = void 0;

      beforeEach(function () {
        LawnMowingSegment = LawnMowingRow.childAt(0);
      });

      it('is a LawnMowing Segment', function () {
        expect(LawnMowingSegment.type()).toEqual(_semanticUiReact.Segment);
      });

      describe('LawnMowingComponent', function () {
        var LawnMowingComponent = void 0;

        beforeEach(function () {
          LawnMowingComponent = LawnMowingSegment.childAt(0);
        });

        it('is a LawnMowing', function () {
          expect(LawnMowingComponent.type()).toEqual(_RequestOption2.default);
        });
        it('has the correct title', function () {
          expect(LawnMowingComponent.props().title).toEqual('Lawn Mowing');
        });
        it('has an imageURL', function () {
          expect(LawnMowingComponent.props().imageURL).toBeTruthy();
        });
        it('has a onClick that uses function from redux', function () {
          LawnMowingComponent.props().onClick();
          expect(setTypeOfRequest.mock.calls.length).toBe(1);
        });
      });
    });
  });

  describe('RakingRow', function () {
    var RakingRow = void 0;

    beforeEach(function () {
      RakingRow = wrapper.childAt(3);
    });

    it('is a Raking Row', function () {
      expect(RakingRow.type()).toEqual(_semanticUiReact.Grid.Row);
    });

    describe('RakingSegment', function () {
      var RakingSegment = void 0;

      beforeEach(function () {
        RakingSegment = RakingRow.childAt(0);
      });

      it('is a Raking Segment', function () {
        expect(RakingSegment.type()).toEqual(_semanticUiReact.Segment);
      });

      describe('RakingComponent', function () {
        var RakingComponent = void 0;

        beforeEach(function () {
          RakingComponent = RakingSegment.childAt(0);
        });

        it('is a Raking Component', function () {
          expect(RakingComponent.type()).toEqual(_RequestOption2.default);
        });
        it('has the correct title', function () {
          expect(RakingComponent.props().title).toEqual('Leaf Raking');
        });
        it('has an imageURL', function () {
          expect(RakingComponent.props().imageURL).toBeTruthy();
        });
      });
    });
  });

  describe('snowClearingRow', function () {
    var snowClearingRow = void 0;

    beforeEach(function () {
      snowClearingRow = wrapper.childAt(4);
    });

    it('is a snowClearing Row', function () {
      expect(snowClearingRow.type()).toEqual(_semanticUiReact.Grid.Row);
    });

    describe('snowClearingSegment', function () {
      var snowClearingSegment = void 0;

      beforeEach(function () {
        snowClearingSegment = snowClearingRow.childAt(0);
      });

      it('is a snowClearing Segment', function () {
        expect(snowClearingSegment.type()).toEqual(_semanticUiReact.Segment);
      });

      describe('snowClearingComponent', function () {
        var snowClearingComponent = void 0;

        beforeEach(function () {
          snowClearingComponent = snowClearingSegment.childAt(0);
        });

        it('is a snowClearing', function () {
          expect(snowClearingComponent.type()).toEqual(_RequestOption2.default);
        });
        it('has the correct title', function () {
          expect(snowClearingComponent.props().title).toEqual('Snow Clearing');
        });
        it('has an imageURL', function () {
          expect(snowClearingComponent.props().imageURL).toBeTruthy();
        });
      });
    });
  });

  describe('CustomRow', function () {
    var CustomRow = void 0;

    beforeEach(function () {
      CustomRow = wrapper.childAt(5);
    });

    it('is a Custom Row', function () {
      expect(CustomRow.type()).toEqual(_semanticUiReact.Grid.Row);
    });

    describe('CustomSegment', function () {
      var CustomSegment = void 0;

      beforeEach(function () {
        CustomSegment = CustomRow.childAt(0);
      });

      it('is a Custom Segment', function () {
        expect(CustomSegment.type()).toEqual(_semanticUiReact.Segment);
      });

      describe('CustomComponent', function () {
        var CustomComponent = void 0;

        beforeEach(function () {
          CustomComponent = CustomSegment.childAt(0);
        });

        it('is a Custom', function () {
          expect(CustomComponent.type()).toEqual(_RequestOption2.default);
        });
        it('has the correct title', function () {
          expect(CustomComponent.props().title).toEqual('Custom Request');
        });
        it('has an imageURL', function () {
          expect(CustomComponent.props().imageURL).toBeTruthy();
        });
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,