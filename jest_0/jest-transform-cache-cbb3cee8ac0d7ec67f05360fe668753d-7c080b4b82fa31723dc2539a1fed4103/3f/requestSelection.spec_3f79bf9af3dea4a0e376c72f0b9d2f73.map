{"version":3,"sources":["requestSelection.spec.js"],"names":["describe","wrapper","setTypeOfRequest","jest","fn","renderComponent","beforeEach","it","expect","type","toEqual","Grid","props","container","toBeTruthy","assertions","GridRows","children","forEach","row","Row","BreadcrumbRow","childAt","BreadcrumbSegment","Segment","Breadcrumb","BreadcrumbComponent","activeStep","HeaderRow","HeaderSegment","header","Header","as","subHeader","SubHeader","LawnMowingRow","LawnMowingSegment","LawnMowingComponent","RequestOptionComponent","title","imageURL","onClick","mock","calls","length","toBe","RakingRow","RakingSegment","RakingComponent","snowClearingRow","snowClearingSegment","snowClearingComponent","CustomRow","CustomSegment","CustomComponent"],"mappings":"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","file":"requestSelection.spec.js","sourcesContent":["import React from 'react';\nimport { shallowWithStore } from 'enzyme-redux';\nimport { createMockStore } from 'redux-test-utils';\nimport configureStore from 'redux-mock-store';\nimport Actions from '../../../../src/reducers/Actions';\nimport { Menu, Modal, Grid, Input, Button, Form, Segment, Header } from 'semantic-ui-react';\nimport { shallow } from 'enzyme';\nimport RequestSelectionComponent from '../../../../src/components/pages/pipeline/requestSelection';\nimport BreadcrumbComponent from '../../../../src/components/helpers/breadcrumb';\nimport RequestOptionComponent from '../../../../src/components/helpers/RequestOption';\n\ndescribe('RequestSelection', () => {\n  let wrapper;\n  const setTypeOfRequest = jest.fn();\n  const renderComponent = () =>\n    shallow(<RequestSelectionComponent setTypeOfRequest={setTypeOfRequest} />);\n\n  beforeEach(() => {\n    wrapper = renderComponent();\n  });\n\n  it('is wrapped in a Grid Container', () => {\n    expect(wrapper.type()).toEqual(Grid);\n  });\n\n  it('is styled as a container Grid', () => {\n    expect(wrapper.props().container).toBeTruthy();\n  });\n\n  it('contains five rows', () => {\n    expect.assertions(6);\n\n    const GridRows = wrapper.children();\n\n    GridRows.forEach((row) => {\n      expect(row.type()).toEqual(Grid.Row);\n    });\n  });\n\n  describe('BreadcrumbRow', () => {\n    let BreadcrumbRow;\n\n    beforeEach(() => {\n      BreadcrumbRow = wrapper.childAt(0);\n    });\n\n    it('is a Breadcrumb Row', () => {\n      expect(BreadcrumbRow.type()).toEqual(Grid.Row);\n    });\n\n    describe('BreadcrumbSegment', () => {\n      let BreadcrumbSegment;\n\n      beforeEach(() => {\n        BreadcrumbSegment = BreadcrumbRow.childAt(0);\n      });\n\n      it('is a Breadcrumb Segment', () => {\n        expect(BreadcrumbSegment.type()).toEqual(Segment);\n      });\n\n      describe('BreadcrumbComponent', () => {\n        let Breadcrumb;\n\n        beforeEach(() => {\n          Breadcrumb = BreadcrumbSegment.childAt(0);\n        });\n\n        it('is a breadcrumb', () => {\n          expect(Breadcrumb.type()).toEqual(BreadcrumbComponent);\n        });\n\n        it('has an active step', () => {\n          expect(Breadcrumb.props().activeStep).toEqual(0);\n        });\n      });\n    });\n  });\n\n  describe('HeaderRow', () => {\n    let HeaderRow;\n\n    beforeEach(() => {\n      HeaderRow = wrapper.childAt(1);\n    });\n\n    it('is a Header Row', () => {\n      expect(HeaderRow.type()).toEqual(Grid.Row);\n    });\n\n    describe('HeaderSegment', () => {\n      let HeaderSegment;\n\n      beforeEach(() => {\n        HeaderSegment = HeaderRow.childAt(0);\n      });\n\n      it('is a Header Segment', () => {\n        expect(HeaderSegment.type()).toEqual(Segment);\n      });\n\n      describe('Header', () => {\n        let header;\n\n        beforeEach(() => {\n          header = HeaderSegment.childAt(0);\n        });\n\n        it('is a Header', () => {\n          expect(header.type()).toEqual(Header);\n        });\n\n        it('is a Header', () => {\n          expect(header.props().as).toEqual('h2');\n        });\n\n        describe('SubHeader', () => {\n          let subHeader;\n\n          beforeEach(() => {\n            subHeader = header.childAt(0);\n          });\n\n          it('is a SubHeader', () => {\n            expect(subHeader.type()).toEqual(Header.SubHeader);\n          });\n        });\n      });\n    });\n  });\n  describe('LawnMowingRow', () => {\n    let LawnMowingRow;\n\n    beforeEach(() => {\n      LawnMowingRow = wrapper.childAt(2);\n    });\n\n    it('is a LawnMowing Row', () => {\n      expect(LawnMowingRow.type()).toEqual(Grid.Row);\n    });\n\n    describe('LawnMowingSegment', () => {\n      let LawnMowingSegment;\n\n      beforeEach(() => {\n        LawnMowingSegment = LawnMowingRow.childAt(0);\n      });\n\n      it('is a LawnMowing Segment', () => {\n        expect(LawnMowingSegment.type()).toEqual(Segment);\n      });\n\n      describe('LawnMowingComponent', () => {\n        let LawnMowingComponent;\n\n        beforeEach(() => {\n          LawnMowingComponent = LawnMowingSegment.childAt(0);\n        });\n\n        it('is a LawnMowing', () => {\n          expect(LawnMowingComponent.type()).toEqual(RequestOptionComponent);\n        });\n        it('has the correct title', () => {\n          expect(LawnMowingComponent.props().title).toEqual('Lawn Mowing');\n        });\n        it('has an imageURL', () => {\n          expect(LawnMowingComponent.props().imageURL).toBeTruthy();\n        });\n        it('has a onClick that uses function from redux', () => {\n          LawnMowingComponent.props().onClick();\n          expect(setTypeOfRequest.mock.calls.length).toBe(1);\n        });\n      });\n    });\n  });\n\n  describe('RakingRow', () => {\n    let RakingRow;\n\n    beforeEach(() => {\n      RakingRow = wrapper.childAt(3);\n    });\n\n    it('is a Raking Row', () => {\n      expect(RakingRow.type()).toEqual(Grid.Row);\n    });\n\n    describe('RakingSegment', () => {\n      let RakingSegment;\n\n      beforeEach(() => {\n        RakingSegment = RakingRow.childAt(0);\n      });\n\n      it('is a Raking Segment', () => {\n        expect(RakingSegment.type()).toEqual(Segment);\n      });\n\n      describe('RakingComponent', () => {\n        let RakingComponent;\n\n        beforeEach(() => {\n          RakingComponent = RakingSegment.childAt(0);\n        });\n\n        it('is a Raking Component', () => {\n          expect(RakingComponent.type()).toEqual(RequestOptionComponent);\n        });\n        it('has the correct title', () => {\n          expect(RakingComponent.props().title).toEqual('Leaf Raking');\n        });\n        it('has an imageURL', () => {\n          expect(RakingComponent.props().imageURL).toBeTruthy();\n        });\n      });\n    });\n  });\n\n  describe('snowClearingRow', () => {\n    let snowClearingRow;\n\n    beforeEach(() => {\n      snowClearingRow = wrapper.childAt(4);\n    });\n\n    it('is a snowClearing Row', () => {\n      expect(snowClearingRow.type()).toEqual(Grid.Row);\n    });\n\n    describe('snowClearingSegment', () => {\n      let snowClearingSegment;\n\n      beforeEach(() => {\n        snowClearingSegment = snowClearingRow.childAt(0);\n      });\n\n      it('is a snowClearing Segment', () => {\n        expect(snowClearingSegment.type()).toEqual(Segment);\n      });\n\n      describe('snowClearingComponent', () => {\n        let snowClearingComponent;\n\n        beforeEach(() => {\n          snowClearingComponent = snowClearingSegment.childAt(0);\n        });\n\n        it('is a snowClearing', () => {\n          expect(snowClearingComponent.type()).toEqual(RequestOptionComponent);\n        });\n        it('has the correct title', () => {\n          expect(snowClearingComponent.props().title).toEqual('Snow Clearing');\n        });\n        it('has an imageURL', () => {\n          expect(snowClearingComponent.props().imageURL).toBeTruthy();\n        });\n      });\n    });\n  });\n\n  describe('CustomRow', () => {\n    let CustomRow;\n\n    beforeEach(() => {\n      CustomRow = wrapper.childAt(5);\n    });\n\n    it('is a Custom Row', () => {\n      expect(CustomRow.type()).toEqual(Grid.Row);\n    });\n\n    describe('CustomSegment', () => {\n      let CustomSegment;\n\n      beforeEach(() => {\n        CustomSegment = CustomRow.childAt(0);\n      });\n\n      it('is a Custom Segment', () => {\n        expect(CustomSegment.type()).toEqual(Segment);\n      });\n\n      describe('CustomComponent', () => {\n        let CustomComponent;\n\n        beforeEach(() => {\n          CustomComponent = CustomSegment.childAt(0);\n        });\n\n        it('is a Custom', () => {\n          expect(CustomComponent.type()).toEqual(RequestOptionComponent);\n        });\n        it('has the correct title', () => {\n          expect(CustomComponent.props().title).toEqual('Custom Request');\n        });\n        it('has an imageURL', () => {\n          expect(CustomComponent.props().imageURL).toBeTruthy();\n        });\n      });\n    });\n  });\n});\n"]}