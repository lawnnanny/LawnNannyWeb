62d7fb863fb1cd98a81329370fc9f3be
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _enzyme = require('enzyme');

var _chance = require('chance');

var _chance2 = _interopRequireDefault(_chance);

var _breadcrumb = require('../../../src/components/helpers/breadcrumb');

var _breadcrumb2 = _interopRequireDefault(_breadcrumb);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('RequestInformation', function () {
  var wrapper = void 0;

  var renderComponent = function renderComponent() {
    return (0, _enzyme.shallow)(_react2.default.createElement(_breadcrumb2.default, null));
  };

  beforeEach(function () {
    wrapper = renderComponent();
  });

  it('is wrapped in a Grid', function () {
    expect(wrapper.type()).toEqual(_semanticUiReact.Grid);
  });

  describe(' Row', function () {
    var row = void 0;

    beforeEach(function () {
      row = wrapper.childAt(0);
    });

    it('is a row', function () {
      expect(row.type()).toEqual(_semanticUiReact.Grid.Row);
    });

    describe('request column', function () {
      var requestColumn = void 0;

      beforeEach(function () {
        requestColumn = row.childAt(0);
      });

      it('is a column', function () {
        expect(requestColumn.type()).toEqual(_semanticUiReact.Grid.Column);
      });
      describe('request segment', function () {
        var requestSegment = void 0;

        beforeEach(function () {
          requestSegment = requestColumn.childAt(0);
        });

        it('is a segment', function () {
          expect(requestSegment.type()).toEqual(_semanticUiReact.Segment);
        });
        describe('request icon', function () {
          var requestIcon = void 0;

          beforeEach(function () {
            requestIcon = requestSegment.childAt(0);
            console.log(requestIcon.debug());
          });

          it('is a segment', function () {
            expect(requestIcon.type()).toEqual(_semanticUiReact.Icon);
          });
        });
      });
      describe('information column', function () {
        var informationColumn = void 0;

        beforeEach(function () {
          informationColumn = row.childAt(1);
        });

        it('is a column', function () {
          expect(informationColumn.type()).toEqual(_semanticUiReact.Grid.Column);
        });
        describe('information segment', function () {
          var informationSegment = void 0;

          beforeEach(function () {
            informationSegment = informationColumn.childAt(0);
          });

          it('is a segment', function () {
            expect(informationSegment.type()).toEqual(_semanticUiReact.Segment);
          });
          describe('information icon', function () {
            var informationIcon = void 0;

            beforeEach(function () {
              informationIcon = informationSegment.childAt(0);
            });

            it('is a segment', function () {
              expect(informationIcon.type()).toEqual(_semanticUiReact.Icon);
            });
          });
        });
      });
      describe('location column', function () {
        var locationColumn = void 0;

        beforeEach(function () {
          locationColumn = row.childAt(2);
        });

        it('is a column', function () {
          expect(locationColumn.type()).toEqual(_semanticUiReact.Grid.Column);
        });
        describe('location segment', function () {
          var locationSegment = void 0;

          beforeEach(function () {
            locationSegment = locationColumn.childAt(0);
          });

          it('is a segment', function () {
            expect(locationSegment.type()).toEqual(_semanticUiReact.Segment);
          });
          describe('location icon', function () {
            var locationIcon = void 0;

            beforeEach(function () {
              locationIcon = locationSegment.childAt(0);
            });

            it('is a segment', function () {
              expect(locationIcon.type()).toEqual(_semanticUiReact.Icon);
            });
          });
        });
      });
      describe('price column', function () {
        var priceColumn = void 0;

        beforeEach(function () {
          priceColumn = row.childAt(3);
        });

        it('is a column', function () {
          expect(priceColumn.type()).toEqual(_semanticUiReact.Grid.Column);
        });
        describe('price segment', function () {
          var priceSegment = void 0;

          beforeEach(function () {
            priceSegment = priceColumn.childAt(0);
          });

          it('is a segment', function () {
            expect(priceSegment.type()).toEqual(_semanticUiReact.Segment);
          });
          describe('price icon', function () {
            var priceIcon = void 0;

            beforeEach(function () {
              priceIcon = priceSegment.childAt(0);
            });

            it('is a segment', function () {
              expect(priceIcon.type()).toEqual(_semanticUiReact.Icon);
            });
          });
        });
      });
      describe('review column', function () {
        var reviewColumn = void 0;

        beforeEach(function () {
          reviewColumn = row.childAt(4);
        });

        it('is a column', function () {
          expect(reviewColumn.type()).toEqual(_semanticUiReact.Grid.Column);
        });
        describe('review segment', function () {
          var reviewSegment = void 0;

          beforeEach(function () {
            reviewSegment = reviewColumn.childAt(0);
          });

          it('is a segment', function () {
            expect(reviewSegment.type()).toEqual(_semanticUiReact.Segment);
          });
          describe('review icon', function () {
            var reviewIcon = void 0;

            beforeEach(function () {
              reviewIcon = reviewSegment.childAt(0);
            });

            it('is a segment', function () {
              expect(reviewIcon.type()).toEqual(_semanticUiReact.Icon);
            });
          });
        });
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,